/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the DatabaseCredential type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseCredential{}

// DatabaseCredential struct for DatabaseCredential
type DatabaseCredential struct {
	Id int32 `json:"id"`
	MetaType string `json:"_type"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	ConnectionUrl string `json:"connection_url"`
	Type string `json:"type"`
	Default bool `json:"default"`
	Links *DatabaseCredentialLinks `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DatabaseCredential DatabaseCredential

// NewDatabaseCredential instantiates a new DatabaseCredential object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseCredential(id int32, metaType string, createdAt string, updatedAt string, connectionUrl string, type_ string, default_ bool) *DatabaseCredential {
	this := DatabaseCredential{}
	this.Id = id
	this.MetaType = metaType
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.ConnectionUrl = connectionUrl
	this.Type = type_
	this.Default = default_
	return &this
}

// NewDatabaseCredentialWithDefaults instantiates a new DatabaseCredential object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseCredentialWithDefaults() *DatabaseCredential {
	this := DatabaseCredential{}
	return &this
}

// GetId returns the Id field value
func (o *DatabaseCredential) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DatabaseCredential) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DatabaseCredential) SetId(v int32) {
	o.Id = v
}

// GetMetaType returns the MetaType field value
func (o *DatabaseCredential) GetMetaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetaType
}

// GetMetaTypeOk returns a tuple with the MetaType field value
// and a boolean to check if the value has been set.
func (o *DatabaseCredential) GetMetaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaType, true
}

// SetMetaType sets field value
func (o *DatabaseCredential) SetMetaType(v string) {
	o.MetaType = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DatabaseCredential) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DatabaseCredential) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DatabaseCredential) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *DatabaseCredential) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *DatabaseCredential) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *DatabaseCredential) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetConnectionUrl returns the ConnectionUrl field value
func (o *DatabaseCredential) GetConnectionUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionUrl
}

// GetConnectionUrlOk returns a tuple with the ConnectionUrl field value
// and a boolean to check if the value has been set.
func (o *DatabaseCredential) GetConnectionUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionUrl, true
}

// SetConnectionUrl sets field value
func (o *DatabaseCredential) SetConnectionUrl(v string) {
	o.ConnectionUrl = v
}

// GetType returns the Type field value
func (o *DatabaseCredential) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DatabaseCredential) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DatabaseCredential) SetType(v string) {
	o.Type = v
}

// GetDefault returns the Default field value
func (o *DatabaseCredential) GetDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Default
}

// GetDefaultOk returns a tuple with the Default field value
// and a boolean to check if the value has been set.
func (o *DatabaseCredential) GetDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Default, true
}

// SetDefault sets field value
func (o *DatabaseCredential) SetDefault(v bool) {
	o.Default = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DatabaseCredential) GetLinks() DatabaseCredentialLinks {
	if o == nil || IsNil(o.Links) {
		var ret DatabaseCredentialLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseCredential) GetLinksOk() (*DatabaseCredentialLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DatabaseCredential) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given DatabaseCredentialLinks and assigns it to the Links field.
func (o *DatabaseCredential) SetLinks(v DatabaseCredentialLinks) {
	o.Links = &v
}

func (o DatabaseCredential) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseCredential) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["_type"] = o.MetaType
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["connection_url"] = o.ConnectionUrl
	toSerialize["type"] = o.Type
	toSerialize["default"] = o.Default
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DatabaseCredential) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"_type",
		"created_at",
		"updated_at",
		"connection_url",
		"type",
		"default",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDatabaseCredential := _DatabaseCredential{}

	err = json.Unmarshal(data, &varDatabaseCredential)

	if err != nil {
		return err
	}

	*o = DatabaseCredential(varDatabaseCredential)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "_type")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "connection_url")
		delete(additionalProperties, "type")
		delete(additionalProperties, "default")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDatabaseCredential struct {
	value *DatabaseCredential
	isSet bool
}

func (v NullableDatabaseCredential) Get() *DatabaseCredential {
	return v.value
}

func (v *NullableDatabaseCredential) Set(val *DatabaseCredential) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseCredential) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseCredential) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseCredential(val *DatabaseCredential) *NullableDatabaseCredential {
	return &NullableDatabaseCredential{value: val, isSet: true}
}

func (v NullableDatabaseCredential) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseCredential) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


