/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Widget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Widget{}

// Widget struct for Widget
type Widget struct {
	Id string `json:"id"`
	MetaType string `json:"_type"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	Title string `json:"title"`
	Summary string `json:"summary"`
	Rating int32 `json:"rating"`
	WidgetType string `json:"widget_type"`
	Data map[string]interface{} `json:"data"`
	RangeBegin string `json:"range_begin"`
	RangeEnd string `json:"range_end"`
	Links *WidgetLinks `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Widget Widget

// NewWidget instantiates a new Widget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWidget(id string, metaType string, createdAt string, updatedAt string, title string, summary string, rating int32, widgetType string, data map[string]interface{}, rangeBegin string, rangeEnd string) *Widget {
	this := Widget{}
	this.Id = id
	this.MetaType = metaType
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Title = title
	this.Summary = summary
	this.Rating = rating
	this.WidgetType = widgetType
	this.Data = data
	this.RangeBegin = rangeBegin
	this.RangeEnd = rangeEnd
	return &this
}

// NewWidgetWithDefaults instantiates a new Widget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWidgetWithDefaults() *Widget {
	this := Widget{}
	return &this
}

// GetId returns the Id field value
func (o *Widget) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Widget) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Widget) SetId(v string) {
	o.Id = v
}

// GetMetaType returns the MetaType field value
func (o *Widget) GetMetaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetaType
}

// GetMetaTypeOk returns a tuple with the MetaType field value
// and a boolean to check if the value has been set.
func (o *Widget) GetMetaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaType, true
}

// SetMetaType sets field value
func (o *Widget) SetMetaType(v string) {
	o.MetaType = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Widget) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Widget) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Widget) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Widget) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Widget) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Widget) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetTitle returns the Title field value
func (o *Widget) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Widget) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Widget) SetTitle(v string) {
	o.Title = v
}

// GetSummary returns the Summary field value
func (o *Widget) GetSummary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *Widget) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *Widget) SetSummary(v string) {
	o.Summary = v
}

// GetRating returns the Rating field value
func (o *Widget) GetRating() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rating
}

// GetRatingOk returns a tuple with the Rating field value
// and a boolean to check if the value has been set.
func (o *Widget) GetRatingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rating, true
}

// SetRating sets field value
func (o *Widget) SetRating(v int32) {
	o.Rating = v
}

// GetWidgetType returns the WidgetType field value
func (o *Widget) GetWidgetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WidgetType
}

// GetWidgetTypeOk returns a tuple with the WidgetType field value
// and a boolean to check if the value has been set.
func (o *Widget) GetWidgetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WidgetType, true
}

// SetWidgetType sets field value
func (o *Widget) SetWidgetType(v string) {
	o.WidgetType = v
}

// GetData returns the Data field value
func (o *Widget) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Widget) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *Widget) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetRangeBegin returns the RangeBegin field value
func (o *Widget) GetRangeBegin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RangeBegin
}

// GetRangeBeginOk returns a tuple with the RangeBegin field value
// and a boolean to check if the value has been set.
func (o *Widget) GetRangeBeginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RangeBegin, true
}

// SetRangeBegin sets field value
func (o *Widget) SetRangeBegin(v string) {
	o.RangeBegin = v
}

// GetRangeEnd returns the RangeEnd field value
func (o *Widget) GetRangeEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RangeEnd
}

// GetRangeEndOk returns a tuple with the RangeEnd field value
// and a boolean to check if the value has been set.
func (o *Widget) GetRangeEndOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RangeEnd, true
}

// SetRangeEnd sets field value
func (o *Widget) SetRangeEnd(v string) {
	o.RangeEnd = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Widget) GetLinks() WidgetLinks {
	if o == nil || IsNil(o.Links) {
		var ret WidgetLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Widget) GetLinksOk() (*WidgetLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Widget) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given WidgetLinks and assigns it to the Links field.
func (o *Widget) SetLinks(v WidgetLinks) {
	o.Links = &v
}

func (o Widget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Widget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["_type"] = o.MetaType
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["title"] = o.Title
	toSerialize["summary"] = o.Summary
	toSerialize["rating"] = o.Rating
	toSerialize["widget_type"] = o.WidgetType
	toSerialize["data"] = o.Data
	toSerialize["range_begin"] = o.RangeBegin
	toSerialize["range_end"] = o.RangeEnd
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Widget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"_type",
		"created_at",
		"updated_at",
		"title",
		"summary",
		"rating",
		"widget_type",
		"data",
		"range_begin",
		"range_end",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWidget := _Widget{}

	err = json.Unmarshal(data, &varWidget)

	if err != nil {
		return err
	}

	*o = Widget(varWidget)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "_type")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "title")
		delete(additionalProperties, "summary")
		delete(additionalProperties, "rating")
		delete(additionalProperties, "widget_type")
		delete(additionalProperties, "data")
		delete(additionalProperties, "range_begin")
		delete(additionalProperties, "range_end")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWidget struct {
	value *Widget
	isSet bool
}

func (v NullableWidget) Get() *Widget {
	return v.value
}

func (v *NullableWidget) Set(val *Widget) {
	v.value = val
	v.isSet = true
}

func (v NullableWidget) IsSet() bool {
	return v.isSet
}

func (v *NullableWidget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidget(val *Widget) *NullableWidget {
	return &NullableWidget{value: val, isSet: true}
}

func (v NullableWidget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


