/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Operation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Operation{}

// Operation struct for Operation
type Operation struct {
	Id int32 `json:"id"`
	MetaType string `json:"_type"`
	Type string `json:"type"`
	Status string `json:"status"`
	Cancelled bool `json:"cancelled"`
	Aborted bool `json:"aborted"`
	GitRef NullableString `json:"git_ref"`
	DockerRef NullableString `json:"docker_ref"`
	Env map[string]interface{} `json:"env"`
	ContainerSize NullableInt32 `json:"container_size"`
	ContainerCount NullableInt32 `json:"container_count"`
	DiskSize int32 `json:"disk_size"`
	Command NullableString `json:"command"`
	Handle NullableString `json:"handle"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	Certificate NullableString `json:"certificate"`
	PrivateKey NullableString `json:"private_key"`
	UserName string `json:"user_name"`
	UserEmail string `json:"user_email"`
	DestinationRegion NullableString `json:"destination_region"`
	Interactive NullableBool `json:"interactive"`
	InstanceProfile NullableString `json:"instance_profile"`
	MountPoint NullableString `json:"mount_point"`
	Links *OperationLinks `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Operation Operation

// NewOperation instantiates a new Operation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperation(id int32, metaType string, type_ string, status string, cancelled bool, aborted bool, gitRef NullableString, dockerRef NullableString, env map[string]interface{}, containerSize NullableInt32, containerCount NullableInt32, diskSize int32, command NullableString, handle NullableString, createdAt string, updatedAt string, certificate NullableString, privateKey NullableString, userName string, userEmail string, destinationRegion NullableString, interactive NullableBool, instanceProfile NullableString, mountPoint NullableString) *Operation {
	this := Operation{}
	this.Id = id
	this.MetaType = metaType
	this.Type = type_
	this.Status = status
	this.Cancelled = cancelled
	this.Aborted = aborted
	this.GitRef = gitRef
	this.DockerRef = dockerRef
	this.Env = env
	this.ContainerSize = containerSize
	this.ContainerCount = containerCount
	this.DiskSize = diskSize
	this.Command = command
	this.Handle = handle
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Certificate = certificate
	this.PrivateKey = privateKey
	this.UserName = userName
	this.UserEmail = userEmail
	this.DestinationRegion = destinationRegion
	this.Interactive = interactive
	this.InstanceProfile = instanceProfile
	this.MountPoint = mountPoint
	return &this
}

// NewOperationWithDefaults instantiates a new Operation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperationWithDefaults() *Operation {
	this := Operation{}
	return &this
}

// GetId returns the Id field value
func (o *Operation) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Operation) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Operation) SetId(v int32) {
	o.Id = v
}

// GetMetaType returns the MetaType field value
func (o *Operation) GetMetaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetaType
}

// GetMetaTypeOk returns a tuple with the MetaType field value
// and a boolean to check if the value has been set.
func (o *Operation) GetMetaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaType, true
}

// SetMetaType sets field value
func (o *Operation) SetMetaType(v string) {
	o.MetaType = v
}

// GetType returns the Type field value
func (o *Operation) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Operation) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Operation) SetType(v string) {
	o.Type = v
}

// GetStatus returns the Status field value
func (o *Operation) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Operation) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Operation) SetStatus(v string) {
	o.Status = v
}

// GetCancelled returns the Cancelled field value
func (o *Operation) GetCancelled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Cancelled
}

// GetCancelledOk returns a tuple with the Cancelled field value
// and a boolean to check if the value has been set.
func (o *Operation) GetCancelledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cancelled, true
}

// SetCancelled sets field value
func (o *Operation) SetCancelled(v bool) {
	o.Cancelled = v
}

// GetAborted returns the Aborted field value
func (o *Operation) GetAborted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Aborted
}

// GetAbortedOk returns a tuple with the Aborted field value
// and a boolean to check if the value has been set.
func (o *Operation) GetAbortedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aborted, true
}

// SetAborted sets field value
func (o *Operation) SetAborted(v bool) {
	o.Aborted = v
}

// GetGitRef returns the GitRef field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Operation) GetGitRef() string {
	if o == nil || o.GitRef.Get() == nil {
		var ret string
		return ret
	}

	return *o.GitRef.Get()
}

// GetGitRefOk returns a tuple with the GitRef field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetGitRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GitRef.Get(), o.GitRef.IsSet()
}

// SetGitRef sets field value
func (o *Operation) SetGitRef(v string) {
	o.GitRef.Set(&v)
}

// GetDockerRef returns the DockerRef field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Operation) GetDockerRef() string {
	if o == nil || o.DockerRef.Get() == nil {
		var ret string
		return ret
	}

	return *o.DockerRef.Get()
}

// GetDockerRefOk returns a tuple with the DockerRef field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetDockerRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DockerRef.Get(), o.DockerRef.IsSet()
}

// SetDockerRef sets field value
func (o *Operation) SetDockerRef(v string) {
	o.DockerRef.Set(&v)
}

// GetEnv returns the Env field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *Operation) GetEnv() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Env
}

// GetEnvOk returns a tuple with the Env field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetEnvOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Env) {
		return map[string]interface{}{}, false
	}
	return o.Env, true
}

// SetEnv sets field value
func (o *Operation) SetEnv(v map[string]interface{}) {
	o.Env = v
}

// GetContainerSize returns the ContainerSize field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Operation) GetContainerSize() int32 {
	if o == nil || o.ContainerSize.Get() == nil {
		var ret int32
		return ret
	}

	return *o.ContainerSize.Get()
}

// GetContainerSizeOk returns a tuple with the ContainerSize field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetContainerSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContainerSize.Get(), o.ContainerSize.IsSet()
}

// SetContainerSize sets field value
func (o *Operation) SetContainerSize(v int32) {
	o.ContainerSize.Set(&v)
}

// GetContainerCount returns the ContainerCount field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Operation) GetContainerCount() int32 {
	if o == nil || o.ContainerCount.Get() == nil {
		var ret int32
		return ret
	}

	return *o.ContainerCount.Get()
}

// GetContainerCountOk returns a tuple with the ContainerCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetContainerCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContainerCount.Get(), o.ContainerCount.IsSet()
}

// SetContainerCount sets field value
func (o *Operation) SetContainerCount(v int32) {
	o.ContainerCount.Set(&v)
}

// GetDiskSize returns the DiskSize field value
func (o *Operation) GetDiskSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskSize
}

// GetDiskSizeOk returns a tuple with the DiskSize field value
// and a boolean to check if the value has been set.
func (o *Operation) GetDiskSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskSize, true
}

// SetDiskSize sets field value
func (o *Operation) SetDiskSize(v int32) {
	o.DiskSize = v
}

// GetCommand returns the Command field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Operation) GetCommand() string {
	if o == nil || o.Command.Get() == nil {
		var ret string
		return ret
	}

	return *o.Command.Get()
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetCommandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Command.Get(), o.Command.IsSet()
}

// SetCommand sets field value
func (o *Operation) SetCommand(v string) {
	o.Command.Set(&v)
}

// GetHandle returns the Handle field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Operation) GetHandle() string {
	if o == nil || o.Handle.Get() == nil {
		var ret string
		return ret
	}

	return *o.Handle.Get()
}

// GetHandleOk returns a tuple with the Handle field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetHandleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Handle.Get(), o.Handle.IsSet()
}

// SetHandle sets field value
func (o *Operation) SetHandle(v string) {
	o.Handle.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *Operation) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Operation) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Operation) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Operation) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Operation) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Operation) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetCertificate returns the Certificate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Operation) GetCertificate() string {
	if o == nil || o.Certificate.Get() == nil {
		var ret string
		return ret
	}

	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// SetCertificate sets field value
func (o *Operation) SetCertificate(v string) {
	o.Certificate.Set(&v)
}

// GetPrivateKey returns the PrivateKey field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Operation) GetPrivateKey() string {
	if o == nil || o.PrivateKey.Get() == nil {
		var ret string
		return ret
	}

	return *o.PrivateKey.Get()
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivateKey.Get(), o.PrivateKey.IsSet()
}

// SetPrivateKey sets field value
func (o *Operation) SetPrivateKey(v string) {
	o.PrivateKey.Set(&v)
}

// GetUserName returns the UserName field value
func (o *Operation) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *Operation) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *Operation) SetUserName(v string) {
	o.UserName = v
}

// GetUserEmail returns the UserEmail field value
func (o *Operation) GetUserEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value
// and a boolean to check if the value has been set.
func (o *Operation) GetUserEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserEmail, true
}

// SetUserEmail sets field value
func (o *Operation) SetUserEmail(v string) {
	o.UserEmail = v
}

// GetDestinationRegion returns the DestinationRegion field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Operation) GetDestinationRegion() string {
	if o == nil || o.DestinationRegion.Get() == nil {
		var ret string
		return ret
	}

	return *o.DestinationRegion.Get()
}

// GetDestinationRegionOk returns a tuple with the DestinationRegion field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetDestinationRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DestinationRegion.Get(), o.DestinationRegion.IsSet()
}

// SetDestinationRegion sets field value
func (o *Operation) SetDestinationRegion(v string) {
	o.DestinationRegion.Set(&v)
}

// GetInteractive returns the Interactive field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *Operation) GetInteractive() bool {
	if o == nil || o.Interactive.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Interactive.Get()
}

// GetInteractiveOk returns a tuple with the Interactive field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetInteractiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Interactive.Get(), o.Interactive.IsSet()
}

// SetInteractive sets field value
func (o *Operation) SetInteractive(v bool) {
	o.Interactive.Set(&v)
}

// GetInstanceProfile returns the InstanceProfile field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Operation) GetInstanceProfile() string {
	if o == nil || o.InstanceProfile.Get() == nil {
		var ret string
		return ret
	}

	return *o.InstanceProfile.Get()
}

// GetInstanceProfileOk returns a tuple with the InstanceProfile field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetInstanceProfileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstanceProfile.Get(), o.InstanceProfile.IsSet()
}

// SetInstanceProfile sets field value
func (o *Operation) SetInstanceProfile(v string) {
	o.InstanceProfile.Set(&v)
}

// GetMountPoint returns the MountPoint field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Operation) GetMountPoint() string {
	if o == nil || o.MountPoint.Get() == nil {
		var ret string
		return ret
	}

	return *o.MountPoint.Get()
}

// GetMountPointOk returns a tuple with the MountPoint field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetMountPointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MountPoint.Get(), o.MountPoint.IsSet()
}

// SetMountPoint sets field value
func (o *Operation) SetMountPoint(v string) {
	o.MountPoint.Set(&v)
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Operation) GetLinks() OperationLinks {
	if o == nil || IsNil(o.Links) {
		var ret OperationLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetLinksOk() (*OperationLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Operation) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given OperationLinks and assigns it to the Links field.
func (o *Operation) SetLinks(v OperationLinks) {
	o.Links = &v
}

func (o Operation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Operation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["_type"] = o.MetaType
	toSerialize["type"] = o.Type
	toSerialize["status"] = o.Status
	toSerialize["cancelled"] = o.Cancelled
	toSerialize["aborted"] = o.Aborted
	toSerialize["git_ref"] = o.GitRef.Get()
	toSerialize["docker_ref"] = o.DockerRef.Get()
	if o.Env != nil {
		toSerialize["env"] = o.Env
	}
	toSerialize["container_size"] = o.ContainerSize.Get()
	toSerialize["container_count"] = o.ContainerCount.Get()
	toSerialize["disk_size"] = o.DiskSize
	toSerialize["command"] = o.Command.Get()
	toSerialize["handle"] = o.Handle.Get()
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["certificate"] = o.Certificate.Get()
	toSerialize["private_key"] = o.PrivateKey.Get()
	toSerialize["user_name"] = o.UserName
	toSerialize["user_email"] = o.UserEmail
	toSerialize["destination_region"] = o.DestinationRegion.Get()
	toSerialize["interactive"] = o.Interactive.Get()
	toSerialize["instance_profile"] = o.InstanceProfile.Get()
	toSerialize["mount_point"] = o.MountPoint.Get()
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Operation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"_type",
		"type",
		"status",
		"cancelled",
		"aborted",
		"git_ref",
		"docker_ref",
		"env",
		"container_size",
		"container_count",
		"disk_size",
		"command",
		"handle",
		"created_at",
		"updated_at",
		"certificate",
		"private_key",
		"user_name",
		"user_email",
		"destination_region",
		"interactive",
		"instance_profile",
		"mount_point",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOperation := _Operation{}

	err = json.Unmarshal(data, &varOperation)

	if err != nil {
		return err
	}

	*o = Operation(varOperation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "_type")
		delete(additionalProperties, "type")
		delete(additionalProperties, "status")
		delete(additionalProperties, "cancelled")
		delete(additionalProperties, "aborted")
		delete(additionalProperties, "git_ref")
		delete(additionalProperties, "docker_ref")
		delete(additionalProperties, "env")
		delete(additionalProperties, "container_size")
		delete(additionalProperties, "container_count")
		delete(additionalProperties, "disk_size")
		delete(additionalProperties, "command")
		delete(additionalProperties, "handle")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "certificate")
		delete(additionalProperties, "private_key")
		delete(additionalProperties, "user_name")
		delete(additionalProperties, "user_email")
		delete(additionalProperties, "destination_region")
		delete(additionalProperties, "interactive")
		delete(additionalProperties, "instance_profile")
		delete(additionalProperties, "mount_point")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOperation struct {
	value *Operation
	isSet bool
}

func (v NullableOperation) Get() *Operation {
	return v.value
}

func (v *NullableOperation) Set(val *Operation) {
	v.value = val
	v.isSet = true
}

func (v NullableOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperation(val *Operation) *NullableOperation {
	return &NullableOperation{value: val, isSet: true}
}

func (v NullableOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


