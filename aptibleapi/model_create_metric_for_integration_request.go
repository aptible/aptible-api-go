/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateMetricForIntegrationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateMetricForIntegrationRequest{}

// CreateMetricForIntegrationRequest struct for CreateMetricForIntegrationRequest
type CreateMetricForIntegrationRequest struct {
	Name string `json:"name"`
	Description string `json:"description"`
	Unit string `json:"unit"`
	Query map[string]interface{} `json:"query"`
	AdditionalProperties map[string]interface{}
}

type _CreateMetricForIntegrationRequest CreateMetricForIntegrationRequest

// NewCreateMetricForIntegrationRequest instantiates a new CreateMetricForIntegrationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateMetricForIntegrationRequest(name string, description string, unit string, query map[string]interface{}) *CreateMetricForIntegrationRequest {
	this := CreateMetricForIntegrationRequest{}
	this.Name = name
	this.Description = description
	this.Unit = unit
	this.Query = query
	return &this
}

// NewCreateMetricForIntegrationRequestWithDefaults instantiates a new CreateMetricForIntegrationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateMetricForIntegrationRequestWithDefaults() *CreateMetricForIntegrationRequest {
	this := CreateMetricForIntegrationRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateMetricForIntegrationRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateMetricForIntegrationRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateMetricForIntegrationRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *CreateMetricForIntegrationRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CreateMetricForIntegrationRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CreateMetricForIntegrationRequest) SetDescription(v string) {
	o.Description = v
}

// GetUnit returns the Unit field value
func (o *CreateMetricForIntegrationRequest) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *CreateMetricForIntegrationRequest) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *CreateMetricForIntegrationRequest) SetUnit(v string) {
	o.Unit = v
}

// GetQuery returns the Query field value
func (o *CreateMetricForIntegrationRequest) GetQuery() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *CreateMetricForIntegrationRequest) GetQueryOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Query, true
}

// SetQuery sets field value
func (o *CreateMetricForIntegrationRequest) SetQuery(v map[string]interface{}) {
	o.Query = v
}

func (o CreateMetricForIntegrationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateMetricForIntegrationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["unit"] = o.Unit
	toSerialize["query"] = o.Query

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateMetricForIntegrationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"unit",
		"query",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateMetricForIntegrationRequest := _CreateMetricForIntegrationRequest{}

	err = json.Unmarshal(data, &varCreateMetricForIntegrationRequest)

	if err != nil {
		return err
	}

	*o = CreateMetricForIntegrationRequest(varCreateMetricForIntegrationRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "unit")
		delete(additionalProperties, "query")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateMetricForIntegrationRequest struct {
	value *CreateMetricForIntegrationRequest
	isSet bool
}

func (v NullableCreateMetricForIntegrationRequest) Get() *CreateMetricForIntegrationRequest {
	return v.value
}

func (v *NullableCreateMetricForIntegrationRequest) Set(val *CreateMetricForIntegrationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMetricForIntegrationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMetricForIntegrationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMetricForIntegrationRequest(val *CreateMetricForIntegrationRequest) *NullableCreateMetricForIntegrationRequest {
	return &NullableCreateMetricForIntegrationRequest{value: val, isSet: true}
}

func (v NullableCreateMetricForIntegrationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMetricForIntegrationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


