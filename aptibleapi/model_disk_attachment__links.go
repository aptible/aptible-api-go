/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
)

// checks if the DiskAttachmentLinks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskAttachmentLinks{}

// DiskAttachmentLinks struct for DiskAttachmentLinks
type DiskAttachmentLinks struct {
	Account *ListAccountsForStack200ResponseLinksStack `json:"account,omitempty"`
	Service *ListAccountsForStack200ResponseLinksStack `json:"service,omitempty"`
	PersistentDisk *ListAccountsForStack200ResponseLinksStack `json:"persistent_disk,omitempty"`
	Operations *ListAccountsForStack200ResponseLinksStack `json:"operations,omitempty"`
	Self *ListAccountsForStack200ResponseLinksStack `json:"self,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DiskAttachmentLinks DiskAttachmentLinks

// NewDiskAttachmentLinks instantiates a new DiskAttachmentLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskAttachmentLinks() *DiskAttachmentLinks {
	this := DiskAttachmentLinks{}
	return &this
}

// NewDiskAttachmentLinksWithDefaults instantiates a new DiskAttachmentLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskAttachmentLinksWithDefaults() *DiskAttachmentLinks {
	this := DiskAttachmentLinks{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *DiskAttachmentLinks) GetAccount() ListAccountsForStack200ResponseLinksStack {
	if o == nil || IsNil(o.Account) {
		var ret ListAccountsForStack200ResponseLinksStack
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskAttachmentLinks) GetAccountOk() (*ListAccountsForStack200ResponseLinksStack, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *DiskAttachmentLinks) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given ListAccountsForStack200ResponseLinksStack and assigns it to the Account field.
func (o *DiskAttachmentLinks) SetAccount(v ListAccountsForStack200ResponseLinksStack) {
	o.Account = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *DiskAttachmentLinks) GetService() ListAccountsForStack200ResponseLinksStack {
	if o == nil || IsNil(o.Service) {
		var ret ListAccountsForStack200ResponseLinksStack
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskAttachmentLinks) GetServiceOk() (*ListAccountsForStack200ResponseLinksStack, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *DiskAttachmentLinks) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given ListAccountsForStack200ResponseLinksStack and assigns it to the Service field.
func (o *DiskAttachmentLinks) SetService(v ListAccountsForStack200ResponseLinksStack) {
	o.Service = &v
}

// GetPersistentDisk returns the PersistentDisk field value if set, zero value otherwise.
func (o *DiskAttachmentLinks) GetPersistentDisk() ListAccountsForStack200ResponseLinksStack {
	if o == nil || IsNil(o.PersistentDisk) {
		var ret ListAccountsForStack200ResponseLinksStack
		return ret
	}
	return *o.PersistentDisk
}

// GetPersistentDiskOk returns a tuple with the PersistentDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskAttachmentLinks) GetPersistentDiskOk() (*ListAccountsForStack200ResponseLinksStack, bool) {
	if o == nil || IsNil(o.PersistentDisk) {
		return nil, false
	}
	return o.PersistentDisk, true
}

// HasPersistentDisk returns a boolean if a field has been set.
func (o *DiskAttachmentLinks) HasPersistentDisk() bool {
	if o != nil && !IsNil(o.PersistentDisk) {
		return true
	}

	return false
}

// SetPersistentDisk gets a reference to the given ListAccountsForStack200ResponseLinksStack and assigns it to the PersistentDisk field.
func (o *DiskAttachmentLinks) SetPersistentDisk(v ListAccountsForStack200ResponseLinksStack) {
	o.PersistentDisk = &v
}

// GetOperations returns the Operations field value if set, zero value otherwise.
func (o *DiskAttachmentLinks) GetOperations() ListAccountsForStack200ResponseLinksStack {
	if o == nil || IsNil(o.Operations) {
		var ret ListAccountsForStack200ResponseLinksStack
		return ret
	}
	return *o.Operations
}

// GetOperationsOk returns a tuple with the Operations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskAttachmentLinks) GetOperationsOk() (*ListAccountsForStack200ResponseLinksStack, bool) {
	if o == nil || IsNil(o.Operations) {
		return nil, false
	}
	return o.Operations, true
}

// HasOperations returns a boolean if a field has been set.
func (o *DiskAttachmentLinks) HasOperations() bool {
	if o != nil && !IsNil(o.Operations) {
		return true
	}

	return false
}

// SetOperations gets a reference to the given ListAccountsForStack200ResponseLinksStack and assigns it to the Operations field.
func (o *DiskAttachmentLinks) SetOperations(v ListAccountsForStack200ResponseLinksStack) {
	o.Operations = &v
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *DiskAttachmentLinks) GetSelf() ListAccountsForStack200ResponseLinksStack {
	if o == nil || IsNil(o.Self) {
		var ret ListAccountsForStack200ResponseLinksStack
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskAttachmentLinks) GetSelfOk() (*ListAccountsForStack200ResponseLinksStack, bool) {
	if o == nil || IsNil(o.Self) {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *DiskAttachmentLinks) HasSelf() bool {
	if o != nil && !IsNil(o.Self) {
		return true
	}

	return false
}

// SetSelf gets a reference to the given ListAccountsForStack200ResponseLinksStack and assigns it to the Self field.
func (o *DiskAttachmentLinks) SetSelf(v ListAccountsForStack200ResponseLinksStack) {
	o.Self = &v
}

func (o DiskAttachmentLinks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskAttachmentLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	if !IsNil(o.PersistentDisk) {
		toSerialize["persistent_disk"] = o.PersistentDisk
	}
	if !IsNil(o.Operations) {
		toSerialize["operations"] = o.Operations
	}
	if !IsNil(o.Self) {
		toSerialize["self"] = o.Self
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DiskAttachmentLinks) UnmarshalJSON(data []byte) (err error) {
	varDiskAttachmentLinks := _DiskAttachmentLinks{}

	err = json.Unmarshal(data, &varDiskAttachmentLinks)

	if err != nil {
		return err
	}

	*o = DiskAttachmentLinks(varDiskAttachmentLinks)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "account")
		delete(additionalProperties, "service")
		delete(additionalProperties, "persistent_disk")
		delete(additionalProperties, "operations")
		delete(additionalProperties, "self")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDiskAttachmentLinks struct {
	value *DiskAttachmentLinks
	isSet bool
}

func (v NullableDiskAttachmentLinks) Get() *DiskAttachmentLinks {
	return v.value
}

func (v *NullableDiskAttachmentLinks) Set(val *DiskAttachmentLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskAttachmentLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskAttachmentLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskAttachmentLinks(val *DiskAttachmentLinks) *NullableDiskAttachmentLinks {
	return &NullableDiskAttachmentLinks{value: val, isSet: true}
}

func (v NullableDiskAttachmentLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskAttachmentLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


