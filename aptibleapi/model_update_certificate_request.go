/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
)

// checks if the UpdateCertificateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCertificateRequest{}

// UpdateCertificateRequest struct for UpdateCertificateRequest
type UpdateCertificateRequest struct {
	CertificateArn *string `json:"certificate_arn,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateCertificateRequest UpdateCertificateRequest

// NewUpdateCertificateRequest instantiates a new UpdateCertificateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCertificateRequest() *UpdateCertificateRequest {
	this := UpdateCertificateRequest{}
	return &this
}

// NewUpdateCertificateRequestWithDefaults instantiates a new UpdateCertificateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCertificateRequestWithDefaults() *UpdateCertificateRequest {
	this := UpdateCertificateRequest{}
	return &this
}

// GetCertificateArn returns the CertificateArn field value if set, zero value otherwise.
func (o *UpdateCertificateRequest) GetCertificateArn() string {
	if o == nil || IsNil(o.CertificateArn) {
		var ret string
		return ret
	}
	return *o.CertificateArn
}

// GetCertificateArnOk returns a tuple with the CertificateArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCertificateRequest) GetCertificateArnOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateArn) {
		return nil, false
	}
	return o.CertificateArn, true
}

// HasCertificateArn returns a boolean if a field has been set.
func (o *UpdateCertificateRequest) HasCertificateArn() bool {
	if o != nil && !IsNil(o.CertificateArn) {
		return true
	}

	return false
}

// SetCertificateArn gets a reference to the given string and assigns it to the CertificateArn field.
func (o *UpdateCertificateRequest) SetCertificateArn(v string) {
	o.CertificateArn = &v
}

func (o UpdateCertificateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCertificateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertificateArn) {
		toSerialize["certificate_arn"] = o.CertificateArn
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateCertificateRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdateCertificateRequest := _UpdateCertificateRequest{}

	err = json.Unmarshal(data, &varUpdateCertificateRequest)

	if err != nil {
		return err
	}

	*o = UpdateCertificateRequest(varUpdateCertificateRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "certificate_arn")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateCertificateRequest struct {
	value *UpdateCertificateRequest
	isSet bool
}

func (v NullableUpdateCertificateRequest) Get() *UpdateCertificateRequest {
	return v.value
}

func (v *NullableUpdateCertificateRequest) Set(val *UpdateCertificateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCertificateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCertificateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCertificateRequest(val *UpdateCertificateRequest) *NullableUpdateCertificateRequest {
	return &NullableUpdateCertificateRequest{value: val, isSet: true}
}

func (v NullableUpdateCertificateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCertificateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


