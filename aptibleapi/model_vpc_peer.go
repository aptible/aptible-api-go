/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the VpcPeer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpcPeer{}

// VpcPeer struct for VpcPeer
type VpcPeer struct {
	Id int32 `json:"id"`
	MetaType string `json:"_type"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	ConnectionId string `json:"connection_id"`
	ConnectionStatus string `json:"connection_status"`
	PeerAccountId string `json:"peer_account_id"`
	PeerVpcId string `json:"peer_vpc_id"`
	Description string `json:"description"`
	Links *VpcPeerLinks `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VpcPeer VpcPeer

// NewVpcPeer instantiates a new VpcPeer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpcPeer(id int32, metaType string, createdAt string, updatedAt string, connectionId string, connectionStatus string, peerAccountId string, peerVpcId string, description string) *VpcPeer {
	this := VpcPeer{}
	this.Id = id
	this.MetaType = metaType
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.ConnectionId = connectionId
	this.ConnectionStatus = connectionStatus
	this.PeerAccountId = peerAccountId
	this.PeerVpcId = peerVpcId
	this.Description = description
	return &this
}

// NewVpcPeerWithDefaults instantiates a new VpcPeer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpcPeerWithDefaults() *VpcPeer {
	this := VpcPeer{}
	return &this
}

// GetId returns the Id field value
func (o *VpcPeer) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VpcPeer) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VpcPeer) SetId(v int32) {
	o.Id = v
}

// GetMetaType returns the MetaType field value
func (o *VpcPeer) GetMetaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetaType
}

// GetMetaTypeOk returns a tuple with the MetaType field value
// and a boolean to check if the value has been set.
func (o *VpcPeer) GetMetaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaType, true
}

// SetMetaType sets field value
func (o *VpcPeer) SetMetaType(v string) {
	o.MetaType = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *VpcPeer) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *VpcPeer) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *VpcPeer) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *VpcPeer) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *VpcPeer) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *VpcPeer) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetConnectionId returns the ConnectionId field value
func (o *VpcPeer) GetConnectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value
// and a boolean to check if the value has been set.
func (o *VpcPeer) GetConnectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionId, true
}

// SetConnectionId sets field value
func (o *VpcPeer) SetConnectionId(v string) {
	o.ConnectionId = v
}

// GetConnectionStatus returns the ConnectionStatus field value
func (o *VpcPeer) GetConnectionStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value
// and a boolean to check if the value has been set.
func (o *VpcPeer) GetConnectionStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionStatus, true
}

// SetConnectionStatus sets field value
func (o *VpcPeer) SetConnectionStatus(v string) {
	o.ConnectionStatus = v
}

// GetPeerAccountId returns the PeerAccountId field value
func (o *VpcPeer) GetPeerAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PeerAccountId
}

// GetPeerAccountIdOk returns a tuple with the PeerAccountId field value
// and a boolean to check if the value has been set.
func (o *VpcPeer) GetPeerAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeerAccountId, true
}

// SetPeerAccountId sets field value
func (o *VpcPeer) SetPeerAccountId(v string) {
	o.PeerAccountId = v
}

// GetPeerVpcId returns the PeerVpcId field value
func (o *VpcPeer) GetPeerVpcId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PeerVpcId
}

// GetPeerVpcIdOk returns a tuple with the PeerVpcId field value
// and a boolean to check if the value has been set.
func (o *VpcPeer) GetPeerVpcIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeerVpcId, true
}

// SetPeerVpcId sets field value
func (o *VpcPeer) SetPeerVpcId(v string) {
	o.PeerVpcId = v
}

// GetDescription returns the Description field value
func (o *VpcPeer) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *VpcPeer) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *VpcPeer) SetDescription(v string) {
	o.Description = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *VpcPeer) GetLinks() VpcPeerLinks {
	if o == nil || IsNil(o.Links) {
		var ret VpcPeerLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpcPeer) GetLinksOk() (*VpcPeerLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *VpcPeer) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given VpcPeerLinks and assigns it to the Links field.
func (o *VpcPeer) SetLinks(v VpcPeerLinks) {
	o.Links = &v
}

func (o VpcPeer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpcPeer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["_type"] = o.MetaType
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["connection_id"] = o.ConnectionId
	toSerialize["connection_status"] = o.ConnectionStatus
	toSerialize["peer_account_id"] = o.PeerAccountId
	toSerialize["peer_vpc_id"] = o.PeerVpcId
	toSerialize["description"] = o.Description
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VpcPeer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"_type",
		"created_at",
		"updated_at",
		"connection_id",
		"connection_status",
		"peer_account_id",
		"peer_vpc_id",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpcPeer := _VpcPeer{}

	err = json.Unmarshal(data, &varVpcPeer)

	if err != nil {
		return err
	}

	*o = VpcPeer(varVpcPeer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "_type")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "connection_id")
		delete(additionalProperties, "connection_status")
		delete(additionalProperties, "peer_account_id")
		delete(additionalProperties, "peer_vpc_id")
		delete(additionalProperties, "description")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVpcPeer struct {
	value *VpcPeer
	isSet bool
}

func (v NullableVpcPeer) Get() *VpcPeer {
	return v.value
}

func (v *NullableVpcPeer) Set(val *VpcPeer) {
	v.value = val
	v.isSet = true
}

func (v NullableVpcPeer) IsSet() bool {
	return v.isSet
}

func (v *NullableVpcPeer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpcPeer(val *VpcPeer) *NullableVpcPeer {
	return &NullableVpcPeer{value: val, isSet: true}
}

func (v NullableVpcPeer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpcPeer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


