/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
)

// checks if the UpdateMetricRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMetricRequest{}

// UpdateMetricRequest struct for UpdateMetricRequest
type UpdateMetricRequest struct {
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Unit *string `json:"unit,omitempty"`
	Query map[string]interface{} `json:"query,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateMetricRequest UpdateMetricRequest

// NewUpdateMetricRequest instantiates a new UpdateMetricRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMetricRequest() *UpdateMetricRequest {
	this := UpdateMetricRequest{}
	return &this
}

// NewUpdateMetricRequestWithDefaults instantiates a new UpdateMetricRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMetricRequestWithDefaults() *UpdateMetricRequest {
	this := UpdateMetricRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateMetricRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMetricRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateMetricRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateMetricRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateMetricRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMetricRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateMetricRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateMetricRequest) SetDescription(v string) {
	o.Description = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *UpdateMetricRequest) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMetricRequest) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *UpdateMetricRequest) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *UpdateMetricRequest) SetUnit(v string) {
	o.Unit = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *UpdateMetricRequest) GetQuery() map[string]interface{} {
	if o == nil || IsNil(o.Query) {
		var ret map[string]interface{}
		return ret
	}
	return o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMetricRequest) GetQueryOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Query) {
		return map[string]interface{}{}, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *UpdateMetricRequest) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given map[string]interface{} and assigns it to the Query field.
func (o *UpdateMetricRequest) SetQuery(v map[string]interface{}) {
	o.Query = v
}

func (o UpdateMetricRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMetricRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateMetricRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdateMetricRequest := _UpdateMetricRequest{}

	err = json.Unmarshal(data, &varUpdateMetricRequest)

	if err != nil {
		return err
	}

	*o = UpdateMetricRequest(varUpdateMetricRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "unit")
		delete(additionalProperties, "query")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateMetricRequest struct {
	value *UpdateMetricRequest
	isSet bool
}

func (v NullableUpdateMetricRequest) Get() *UpdateMetricRequest {
	return v.value
}

func (v *NullableUpdateMetricRequest) Set(val *UpdateMetricRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMetricRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMetricRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMetricRequest(val *UpdateMetricRequest) *NullableUpdateMetricRequest {
	return &NullableUpdateMetricRequest{value: val, isSet: true}
}

func (v NullableUpdateMetricRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMetricRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


