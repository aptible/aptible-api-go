/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Backup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Backup{}

// Backup struct for Backup
type Backup struct {
	Id int32 `json:"id"`
	MetaType string `json:"_type"`
	AwsSnapshotId string `json:"aws_snapshot_id"`
	AwsRegion string `json:"aws_region"`
	DatabaseHandle string `json:"database_handle"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	KmsArn NullableString `json:"kms_arn"`
	Size NullableInt32 `json:"size"`
	Manual NullableBool `json:"manual"`
	Embedded BackupEmbedded `json:"_embedded"`
	Links *BackupLinks `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Backup Backup

// NewBackup instantiates a new Backup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackup(id int32, metaType string, awsSnapshotId string, awsRegion string, databaseHandle string, createdAt string, updatedAt string, kmsArn NullableString, size NullableInt32, manual NullableBool, embedded BackupEmbedded) *Backup {
	this := Backup{}
	this.Id = id
	this.MetaType = metaType
	this.AwsSnapshotId = awsSnapshotId
	this.AwsRegion = awsRegion
	this.DatabaseHandle = databaseHandle
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.KmsArn = kmsArn
	this.Size = size
	this.Manual = manual
	this.Embedded = embedded
	return &this
}

// NewBackupWithDefaults instantiates a new Backup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupWithDefaults() *Backup {
	this := Backup{}
	return &this
}

// GetId returns the Id field value
func (o *Backup) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Backup) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Backup) SetId(v int32) {
	o.Id = v
}

// GetMetaType returns the MetaType field value
func (o *Backup) GetMetaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetaType
}

// GetMetaTypeOk returns a tuple with the MetaType field value
// and a boolean to check if the value has been set.
func (o *Backup) GetMetaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaType, true
}

// SetMetaType sets field value
func (o *Backup) SetMetaType(v string) {
	o.MetaType = v
}

// GetAwsSnapshotId returns the AwsSnapshotId field value
func (o *Backup) GetAwsSnapshotId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AwsSnapshotId
}

// GetAwsSnapshotIdOk returns a tuple with the AwsSnapshotId field value
// and a boolean to check if the value has been set.
func (o *Backup) GetAwsSnapshotIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AwsSnapshotId, true
}

// SetAwsSnapshotId sets field value
func (o *Backup) SetAwsSnapshotId(v string) {
	o.AwsSnapshotId = v
}

// GetAwsRegion returns the AwsRegion field value
func (o *Backup) GetAwsRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AwsRegion
}

// GetAwsRegionOk returns a tuple with the AwsRegion field value
// and a boolean to check if the value has been set.
func (o *Backup) GetAwsRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AwsRegion, true
}

// SetAwsRegion sets field value
func (o *Backup) SetAwsRegion(v string) {
	o.AwsRegion = v
}

// GetDatabaseHandle returns the DatabaseHandle field value
func (o *Backup) GetDatabaseHandle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseHandle
}

// GetDatabaseHandleOk returns a tuple with the DatabaseHandle field value
// and a boolean to check if the value has been set.
func (o *Backup) GetDatabaseHandleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseHandle, true
}

// SetDatabaseHandle sets field value
func (o *Backup) SetDatabaseHandle(v string) {
	o.DatabaseHandle = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Backup) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Backup) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Backup) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Backup) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Backup) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Backup) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetKmsArn returns the KmsArn field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Backup) GetKmsArn() string {
	if o == nil || o.KmsArn.Get() == nil {
		var ret string
		return ret
	}

	return *o.KmsArn.Get()
}

// GetKmsArnOk returns a tuple with the KmsArn field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Backup) GetKmsArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KmsArn.Get(), o.KmsArn.IsSet()
}

// SetKmsArn sets field value
func (o *Backup) SetKmsArn(v string) {
	o.KmsArn.Set(&v)
}

// GetSize returns the Size field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Backup) GetSize() int32 {
	if o == nil || o.Size.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Backup) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// SetSize sets field value
func (o *Backup) SetSize(v int32) {
	o.Size.Set(&v)
}

// GetManual returns the Manual field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *Backup) GetManual() bool {
	if o == nil || o.Manual.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Manual.Get()
}

// GetManualOk returns a tuple with the Manual field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Backup) GetManualOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Manual.Get(), o.Manual.IsSet()
}

// SetManual sets field value
func (o *Backup) SetManual(v bool) {
	o.Manual.Set(&v)
}

// GetEmbedded returns the Embedded field value
func (o *Backup) GetEmbedded() BackupEmbedded {
	if o == nil {
		var ret BackupEmbedded
		return ret
	}

	return o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value
// and a boolean to check if the value has been set.
func (o *Backup) GetEmbeddedOk() (*BackupEmbedded, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Embedded, true
}

// SetEmbedded sets field value
func (o *Backup) SetEmbedded(v BackupEmbedded) {
	o.Embedded = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Backup) GetLinks() BackupLinks {
	if o == nil || IsNil(o.Links) {
		var ret BackupLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetLinksOk() (*BackupLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Backup) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given BackupLinks and assigns it to the Links field.
func (o *Backup) SetLinks(v BackupLinks) {
	o.Links = &v
}

func (o Backup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Backup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["_type"] = o.MetaType
	toSerialize["aws_snapshot_id"] = o.AwsSnapshotId
	toSerialize["aws_region"] = o.AwsRegion
	toSerialize["database_handle"] = o.DatabaseHandle
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["kms_arn"] = o.KmsArn.Get()
	toSerialize["size"] = o.Size.Get()
	toSerialize["manual"] = o.Manual.Get()
	toSerialize["_embedded"] = o.Embedded
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Backup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"_type",
		"aws_snapshot_id",
		"aws_region",
		"database_handle",
		"created_at",
		"updated_at",
		"kms_arn",
		"size",
		"manual",
		"_embedded",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackup := _Backup{}

	err = json.Unmarshal(data, &varBackup)

	if err != nil {
		return err
	}

	*o = Backup(varBackup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "_type")
		delete(additionalProperties, "aws_snapshot_id")
		delete(additionalProperties, "aws_region")
		delete(additionalProperties, "database_handle")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "kms_arn")
		delete(additionalProperties, "size")
		delete(additionalProperties, "manual")
		delete(additionalProperties, "_embedded")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBackup struct {
	value *Backup
	isSet bool
}

func (v NullableBackup) Get() *Backup {
	return v.value
}

func (v *NullableBackup) Set(val *Backup) {
	v.value = val
	v.isSet = true
}

func (v NullableBackup) IsSet() bool {
	return v.isSet
}

func (v *NullableBackup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackup(val *Backup) *NullableBackup {
	return &NullableBackup{value: val, isSet: true}
}

func (v NullableBackup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


