/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Disk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Disk{}

// Disk struct for Disk
type Disk struct {
	Id int32 `json:"id"`
	Handle string `json:"handle"`
	EbsVolumeId NullableString `json:"ebs_volume_id"`
	EbsVolumeType NullableString `json:"ebs_volume_type"`
	Filesystem string `json:"filesystem"`
	Passphrase *string `json:"passphrase,omitempty"`
	KeyBytes int32 `json:"key_bytes"`
	Size int32 `json:"size"`
	ProvisionedIops int32 `json:"provisioned_iops"`
	Host NullableString `json:"host"`
	Device NullableString `json:"device"`
	Attached bool `json:"attached"`
	MetaType string `json:"_type"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	Ec2InstanceId NullableString `json:"ec2_instance_id"`
	BaselineIops NullableInt32 `json:"baseline_iops"`
	AvailabilityZone NullableString `json:"availability_zone"`
	CurrentKmsArn NullableString `json:"current_kms_arn"`
	Links *DiskLinks `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Disk Disk

// NewDisk instantiates a new Disk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisk(id int32, handle string, ebsVolumeId NullableString, ebsVolumeType NullableString, filesystem string, keyBytes int32, size int32, provisionedIops int32, host NullableString, device NullableString, attached bool, metaType string, createdAt string, updatedAt string, ec2InstanceId NullableString, baselineIops NullableInt32, availabilityZone NullableString, currentKmsArn NullableString) *Disk {
	this := Disk{}
	this.Id = id
	this.Handle = handle
	this.EbsVolumeId = ebsVolumeId
	this.EbsVolumeType = ebsVolumeType
	this.Filesystem = filesystem
	this.KeyBytes = keyBytes
	this.Size = size
	this.ProvisionedIops = provisionedIops
	this.Host = host
	this.Device = device
	this.Attached = attached
	this.MetaType = metaType
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Ec2InstanceId = ec2InstanceId
	this.BaselineIops = baselineIops
	this.AvailabilityZone = availabilityZone
	this.CurrentKmsArn = currentKmsArn
	return &this
}

// NewDiskWithDefaults instantiates a new Disk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskWithDefaults() *Disk {
	this := Disk{}
	return &this
}

// GetId returns the Id field value
func (o *Disk) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Disk) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Disk) SetId(v int32) {
	o.Id = v
}

// GetHandle returns the Handle field value
func (o *Disk) GetHandle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Handle
}

// GetHandleOk returns a tuple with the Handle field value
// and a boolean to check if the value has been set.
func (o *Disk) GetHandleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Handle, true
}

// SetHandle sets field value
func (o *Disk) SetHandle(v string) {
	o.Handle = v
}

// GetEbsVolumeId returns the EbsVolumeId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Disk) GetEbsVolumeId() string {
	if o == nil || o.EbsVolumeId.Get() == nil {
		var ret string
		return ret
	}

	return *o.EbsVolumeId.Get()
}

// GetEbsVolumeIdOk returns a tuple with the EbsVolumeId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetEbsVolumeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EbsVolumeId.Get(), o.EbsVolumeId.IsSet()
}

// SetEbsVolumeId sets field value
func (o *Disk) SetEbsVolumeId(v string) {
	o.EbsVolumeId.Set(&v)
}

// GetEbsVolumeType returns the EbsVolumeType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Disk) GetEbsVolumeType() string {
	if o == nil || o.EbsVolumeType.Get() == nil {
		var ret string
		return ret
	}

	return *o.EbsVolumeType.Get()
}

// GetEbsVolumeTypeOk returns a tuple with the EbsVolumeType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetEbsVolumeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EbsVolumeType.Get(), o.EbsVolumeType.IsSet()
}

// SetEbsVolumeType sets field value
func (o *Disk) SetEbsVolumeType(v string) {
	o.EbsVolumeType.Set(&v)
}

// GetFilesystem returns the Filesystem field value
func (o *Disk) GetFilesystem() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filesystem
}

// GetFilesystemOk returns a tuple with the Filesystem field value
// and a boolean to check if the value has been set.
func (o *Disk) GetFilesystemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filesystem, true
}

// SetFilesystem sets field value
func (o *Disk) SetFilesystem(v string) {
	o.Filesystem = v
}

// GetPassphrase returns the Passphrase field value if set, zero value otherwise.
func (o *Disk) GetPassphrase() string {
	if o == nil || IsNil(o.Passphrase) {
		var ret string
		return ret
	}
	return *o.Passphrase
}

// GetPassphraseOk returns a tuple with the Passphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Disk) GetPassphraseOk() (*string, bool) {
	if o == nil || IsNil(o.Passphrase) {
		return nil, false
	}
	return o.Passphrase, true
}

// HasPassphrase returns a boolean if a field has been set.
func (o *Disk) HasPassphrase() bool {
	if o != nil && !IsNil(o.Passphrase) {
		return true
	}

	return false
}

// SetPassphrase gets a reference to the given string and assigns it to the Passphrase field.
func (o *Disk) SetPassphrase(v string) {
	o.Passphrase = &v
}

// GetKeyBytes returns the KeyBytes field value
func (o *Disk) GetKeyBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.KeyBytes
}

// GetKeyBytesOk returns a tuple with the KeyBytes field value
// and a boolean to check if the value has been set.
func (o *Disk) GetKeyBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyBytes, true
}

// SetKeyBytes sets field value
func (o *Disk) SetKeyBytes(v int32) {
	o.KeyBytes = v
}

// GetSize returns the Size field value
func (o *Disk) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *Disk) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *Disk) SetSize(v int32) {
	o.Size = v
}

// GetProvisionedIops returns the ProvisionedIops field value
func (o *Disk) GetProvisionedIops() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProvisionedIops
}

// GetProvisionedIopsOk returns a tuple with the ProvisionedIops field value
// and a boolean to check if the value has been set.
func (o *Disk) GetProvisionedIopsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProvisionedIops, true
}

// SetProvisionedIops sets field value
func (o *Disk) SetProvisionedIops(v int32) {
	o.ProvisionedIops = v
}

// GetHost returns the Host field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Disk) GetHost() string {
	if o == nil || o.Host.Get() == nil {
		var ret string
		return ret
	}

	return *o.Host.Get()
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Host.Get(), o.Host.IsSet()
}

// SetHost sets field value
func (o *Disk) SetHost(v string) {
	o.Host.Set(&v)
}

// GetDevice returns the Device field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Disk) GetDevice() string {
	if o == nil || o.Device.Get() == nil {
		var ret string
		return ret
	}

	return *o.Device.Get()
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetDeviceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Device.Get(), o.Device.IsSet()
}

// SetDevice sets field value
func (o *Disk) SetDevice(v string) {
	o.Device.Set(&v)
}

// GetAttached returns the Attached field value
func (o *Disk) GetAttached() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Attached
}

// GetAttachedOk returns a tuple with the Attached field value
// and a boolean to check if the value has been set.
func (o *Disk) GetAttachedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attached, true
}

// SetAttached sets field value
func (o *Disk) SetAttached(v bool) {
	o.Attached = v
}

// GetMetaType returns the MetaType field value
func (o *Disk) GetMetaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetaType
}

// GetMetaTypeOk returns a tuple with the MetaType field value
// and a boolean to check if the value has been set.
func (o *Disk) GetMetaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaType, true
}

// SetMetaType sets field value
func (o *Disk) SetMetaType(v string) {
	o.MetaType = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Disk) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Disk) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Disk) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Disk) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Disk) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Disk) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetEc2InstanceId returns the Ec2InstanceId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Disk) GetEc2InstanceId() string {
	if o == nil || o.Ec2InstanceId.Get() == nil {
		var ret string
		return ret
	}

	return *o.Ec2InstanceId.Get()
}

// GetEc2InstanceIdOk returns a tuple with the Ec2InstanceId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetEc2InstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ec2InstanceId.Get(), o.Ec2InstanceId.IsSet()
}

// SetEc2InstanceId sets field value
func (o *Disk) SetEc2InstanceId(v string) {
	o.Ec2InstanceId.Set(&v)
}

// GetBaselineIops returns the BaselineIops field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Disk) GetBaselineIops() int32 {
	if o == nil || o.BaselineIops.Get() == nil {
		var ret int32
		return ret
	}

	return *o.BaselineIops.Get()
}

// GetBaselineIopsOk returns a tuple with the BaselineIops field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetBaselineIopsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BaselineIops.Get(), o.BaselineIops.IsSet()
}

// SetBaselineIops sets field value
func (o *Disk) SetBaselineIops(v int32) {
	o.BaselineIops.Set(&v)
}

// GetAvailabilityZone returns the AvailabilityZone field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Disk) GetAvailabilityZone() string {
	if o == nil || o.AvailabilityZone.Get() == nil {
		var ret string
		return ret
	}

	return *o.AvailabilityZone.Get()
}

// GetAvailabilityZoneOk returns a tuple with the AvailabilityZone field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetAvailabilityZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailabilityZone.Get(), o.AvailabilityZone.IsSet()
}

// SetAvailabilityZone sets field value
func (o *Disk) SetAvailabilityZone(v string) {
	o.AvailabilityZone.Set(&v)
}

// GetCurrentKmsArn returns the CurrentKmsArn field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Disk) GetCurrentKmsArn() string {
	if o == nil || o.CurrentKmsArn.Get() == nil {
		var ret string
		return ret
	}

	return *o.CurrentKmsArn.Get()
}

// GetCurrentKmsArnOk returns a tuple with the CurrentKmsArn field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetCurrentKmsArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentKmsArn.Get(), o.CurrentKmsArn.IsSet()
}

// SetCurrentKmsArn sets field value
func (o *Disk) SetCurrentKmsArn(v string) {
	o.CurrentKmsArn.Set(&v)
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Disk) GetLinks() DiskLinks {
	if o == nil || IsNil(o.Links) {
		var ret DiskLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Disk) GetLinksOk() (*DiskLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Disk) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given DiskLinks and assigns it to the Links field.
func (o *Disk) SetLinks(v DiskLinks) {
	o.Links = &v
}

func (o Disk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Disk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["handle"] = o.Handle
	toSerialize["ebs_volume_id"] = o.EbsVolumeId.Get()
	toSerialize["ebs_volume_type"] = o.EbsVolumeType.Get()
	toSerialize["filesystem"] = o.Filesystem
	if !IsNil(o.Passphrase) {
		toSerialize["passphrase"] = o.Passphrase
	}
	toSerialize["key_bytes"] = o.KeyBytes
	toSerialize["size"] = o.Size
	toSerialize["provisioned_iops"] = o.ProvisionedIops
	toSerialize["host"] = o.Host.Get()
	toSerialize["device"] = o.Device.Get()
	toSerialize["attached"] = o.Attached
	toSerialize["_type"] = o.MetaType
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["ec2_instance_id"] = o.Ec2InstanceId.Get()
	toSerialize["baseline_iops"] = o.BaselineIops.Get()
	toSerialize["availability_zone"] = o.AvailabilityZone.Get()
	toSerialize["current_kms_arn"] = o.CurrentKmsArn.Get()
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Disk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"handle",
		"ebs_volume_id",
		"ebs_volume_type",
		"filesystem",
		"key_bytes",
		"size",
		"provisioned_iops",
		"host",
		"device",
		"attached",
		"_type",
		"created_at",
		"updated_at",
		"ec2_instance_id",
		"baseline_iops",
		"availability_zone",
		"current_kms_arn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDisk := _Disk{}

	err = json.Unmarshal(data, &varDisk)

	if err != nil {
		return err
	}

	*o = Disk(varDisk)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "handle")
		delete(additionalProperties, "ebs_volume_id")
		delete(additionalProperties, "ebs_volume_type")
		delete(additionalProperties, "filesystem")
		delete(additionalProperties, "passphrase")
		delete(additionalProperties, "key_bytes")
		delete(additionalProperties, "size")
		delete(additionalProperties, "provisioned_iops")
		delete(additionalProperties, "host")
		delete(additionalProperties, "device")
		delete(additionalProperties, "attached")
		delete(additionalProperties, "_type")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "ec2_instance_id")
		delete(additionalProperties, "baseline_iops")
		delete(additionalProperties, "availability_zone")
		delete(additionalProperties, "current_kms_arn")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDisk struct {
	value *Disk
	isSet bool
}

func (v NullableDisk) Get() *Disk {
	return v.value
}

func (v *NullableDisk) Set(val *Disk) {
	v.value = val
	v.isSet = true
}

func (v NullableDisk) IsSet() bool {
	return v.isSet
}

func (v *NullableDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisk(val *Disk) *NullableDisk {
	return &NullableDisk{value: val, isSet: true}
}

func (v NullableDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


