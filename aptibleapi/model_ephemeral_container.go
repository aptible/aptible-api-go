/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the EphemeralContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EphemeralContainer{}

// EphemeralContainer struct for EphemeralContainer
type EphemeralContainer struct {
	Id int32 `json:"id"`
	Layer string `json:"layer"`
	DockerName string `json:"docker_name"`
	Interactive bool `json:"interactive"`
	MemoryLimit int32 `json:"memory_limit"`
	Allocation []string `json:"allocation"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	MetaType string `json:"_type"`
	Links *EphemeralContainerLinks `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EphemeralContainer EphemeralContainer

// NewEphemeralContainer instantiates a new EphemeralContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEphemeralContainer(id int32, layer string, dockerName string, interactive bool, memoryLimit int32, allocation []string, createdAt string, updatedAt string, metaType string) *EphemeralContainer {
	this := EphemeralContainer{}
	this.Id = id
	this.Layer = layer
	this.DockerName = dockerName
	this.Interactive = interactive
	this.MemoryLimit = memoryLimit
	this.Allocation = allocation
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.MetaType = metaType
	return &this
}

// NewEphemeralContainerWithDefaults instantiates a new EphemeralContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEphemeralContainerWithDefaults() *EphemeralContainer {
	this := EphemeralContainer{}
	return &this
}

// GetId returns the Id field value
func (o *EphemeralContainer) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EphemeralContainer) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EphemeralContainer) SetId(v int32) {
	o.Id = v
}

// GetLayer returns the Layer field value
func (o *EphemeralContainer) GetLayer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Layer
}

// GetLayerOk returns a tuple with the Layer field value
// and a boolean to check if the value has been set.
func (o *EphemeralContainer) GetLayerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Layer, true
}

// SetLayer sets field value
func (o *EphemeralContainer) SetLayer(v string) {
	o.Layer = v
}

// GetDockerName returns the DockerName field value
func (o *EphemeralContainer) GetDockerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DockerName
}

// GetDockerNameOk returns a tuple with the DockerName field value
// and a boolean to check if the value has been set.
func (o *EphemeralContainer) GetDockerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DockerName, true
}

// SetDockerName sets field value
func (o *EphemeralContainer) SetDockerName(v string) {
	o.DockerName = v
}

// GetInteractive returns the Interactive field value
func (o *EphemeralContainer) GetInteractive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Interactive
}

// GetInteractiveOk returns a tuple with the Interactive field value
// and a boolean to check if the value has been set.
func (o *EphemeralContainer) GetInteractiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interactive, true
}

// SetInteractive sets field value
func (o *EphemeralContainer) SetInteractive(v bool) {
	o.Interactive = v
}

// GetMemoryLimit returns the MemoryLimit field value
func (o *EphemeralContainer) GetMemoryLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MemoryLimit
}

// GetMemoryLimitOk returns a tuple with the MemoryLimit field value
// and a boolean to check if the value has been set.
func (o *EphemeralContainer) GetMemoryLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemoryLimit, true
}

// SetMemoryLimit sets field value
func (o *EphemeralContainer) SetMemoryLimit(v int32) {
	o.MemoryLimit = v
}

// GetAllocation returns the Allocation field value
func (o *EphemeralContainer) GetAllocation() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Allocation
}

// GetAllocationOk returns a tuple with the Allocation field value
// and a boolean to check if the value has been set.
func (o *EphemeralContainer) GetAllocationOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Allocation, true
}

// SetAllocation sets field value
func (o *EphemeralContainer) SetAllocation(v []string) {
	o.Allocation = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *EphemeralContainer) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *EphemeralContainer) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *EphemeralContainer) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *EphemeralContainer) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *EphemeralContainer) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *EphemeralContainer) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetMetaType returns the MetaType field value
func (o *EphemeralContainer) GetMetaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetaType
}

// GetMetaTypeOk returns a tuple with the MetaType field value
// and a boolean to check if the value has been set.
func (o *EphemeralContainer) GetMetaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaType, true
}

// SetMetaType sets field value
func (o *EphemeralContainer) SetMetaType(v string) {
	o.MetaType = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *EphemeralContainer) GetLinks() EphemeralContainerLinks {
	if o == nil || IsNil(o.Links) {
		var ret EphemeralContainerLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EphemeralContainer) GetLinksOk() (*EphemeralContainerLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *EphemeralContainer) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given EphemeralContainerLinks and assigns it to the Links field.
func (o *EphemeralContainer) SetLinks(v EphemeralContainerLinks) {
	o.Links = &v
}

func (o EphemeralContainer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EphemeralContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["layer"] = o.Layer
	toSerialize["docker_name"] = o.DockerName
	toSerialize["interactive"] = o.Interactive
	toSerialize["memory_limit"] = o.MemoryLimit
	toSerialize["allocation"] = o.Allocation
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["_type"] = o.MetaType
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EphemeralContainer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"layer",
		"docker_name",
		"interactive",
		"memory_limit",
		"allocation",
		"created_at",
		"updated_at",
		"_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEphemeralContainer := _EphemeralContainer{}

	err = json.Unmarshal(data, &varEphemeralContainer)

	if err != nil {
		return err
	}

	*o = EphemeralContainer(varEphemeralContainer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "layer")
		delete(additionalProperties, "docker_name")
		delete(additionalProperties, "interactive")
		delete(additionalProperties, "memory_limit")
		delete(additionalProperties, "allocation")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "_type")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEphemeralContainer struct {
	value *EphemeralContainer
	isSet bool
}

func (v NullableEphemeralContainer) Get() *EphemeralContainer {
	return v.value
}

func (v *NullableEphemeralContainer) Set(val *EphemeralContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableEphemeralContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableEphemeralContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEphemeralContainer(val *EphemeralContainer) *NullableEphemeralContainer {
	return &NullableEphemeralContainer{value: val, isSet: true}
}

func (v NullableEphemeralContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEphemeralContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


