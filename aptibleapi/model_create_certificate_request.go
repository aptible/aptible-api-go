/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateCertificateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCertificateRequest{}

// CreateCertificateRequest struct for CreateCertificateRequest
type CreateCertificateRequest struct {
	Acme *bool `json:"acme,omitempty"`
	CertificateBody string `json:"certificate_body"`
	PrivateKey string `json:"private_key"`
	AdditionalProperties map[string]interface{}
}

type _CreateCertificateRequest CreateCertificateRequest

// NewCreateCertificateRequest instantiates a new CreateCertificateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCertificateRequest(certificateBody string, privateKey string) *CreateCertificateRequest {
	this := CreateCertificateRequest{}
	this.CertificateBody = certificateBody
	this.PrivateKey = privateKey
	return &this
}

// NewCreateCertificateRequestWithDefaults instantiates a new CreateCertificateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCertificateRequestWithDefaults() *CreateCertificateRequest {
	this := CreateCertificateRequest{}
	return &this
}

// GetAcme returns the Acme field value if set, zero value otherwise.
func (o *CreateCertificateRequest) GetAcme() bool {
	if o == nil || IsNil(o.Acme) {
		var ret bool
		return ret
	}
	return *o.Acme
}

// GetAcmeOk returns a tuple with the Acme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCertificateRequest) GetAcmeOk() (*bool, bool) {
	if o == nil || IsNil(o.Acme) {
		return nil, false
	}
	return o.Acme, true
}

// HasAcme returns a boolean if a field has been set.
func (o *CreateCertificateRequest) HasAcme() bool {
	if o != nil && !IsNil(o.Acme) {
		return true
	}

	return false
}

// SetAcme gets a reference to the given bool and assigns it to the Acme field.
func (o *CreateCertificateRequest) SetAcme(v bool) {
	o.Acme = &v
}

// GetCertificateBody returns the CertificateBody field value
func (o *CreateCertificateRequest) GetCertificateBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateBody
}

// GetCertificateBodyOk returns a tuple with the CertificateBody field value
// and a boolean to check if the value has been set.
func (o *CreateCertificateRequest) GetCertificateBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateBody, true
}

// SetCertificateBody sets field value
func (o *CreateCertificateRequest) SetCertificateBody(v string) {
	o.CertificateBody = v
}

// GetPrivateKey returns the PrivateKey field value
func (o *CreateCertificateRequest) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *CreateCertificateRequest) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *CreateCertificateRequest) SetPrivateKey(v string) {
	o.PrivateKey = v
}

func (o CreateCertificateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCertificateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Acme) {
		toSerialize["acme"] = o.Acme
	}
	toSerialize["certificate_body"] = o.CertificateBody
	toSerialize["private_key"] = o.PrivateKey

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateCertificateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificate_body",
		"private_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCertificateRequest := _CreateCertificateRequest{}

	err = json.Unmarshal(data, &varCreateCertificateRequest)

	if err != nil {
		return err
	}

	*o = CreateCertificateRequest(varCreateCertificateRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "acme")
		delete(additionalProperties, "certificate_body")
		delete(additionalProperties, "private_key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateCertificateRequest struct {
	value *CreateCertificateRequest
	isSet bool
}

func (v NullableCreateCertificateRequest) Get() *CreateCertificateRequest {
	return v.value
}

func (v *NullableCreateCertificateRequest) Set(val *CreateCertificateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCertificateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCertificateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCertificateRequest(val *CreateCertificateRequest) *NullableCreateCertificateRequest {
	return &NullableCreateCertificateRequest{value: val, isSet: true}
}

func (v NullableCreateCertificateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCertificateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


