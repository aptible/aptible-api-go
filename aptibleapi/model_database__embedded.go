/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
)

// checks if the DatabaseEmbedded type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseEmbedded{}

// DatabaseEmbedded struct for DatabaseEmbedded
type DatabaseEmbedded struct {
	LastOperation *Operation `json:"last_operation,omitempty"`
	Disk *Disk `json:"disk,omitempty"`
	DatabaseCredentials []DatabaseCredential `json:"database_credentials,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DatabaseEmbedded DatabaseEmbedded

// NewDatabaseEmbedded instantiates a new DatabaseEmbedded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseEmbedded() *DatabaseEmbedded {
	this := DatabaseEmbedded{}
	return &this
}

// NewDatabaseEmbeddedWithDefaults instantiates a new DatabaseEmbedded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseEmbeddedWithDefaults() *DatabaseEmbedded {
	this := DatabaseEmbedded{}
	return &this
}

// GetLastOperation returns the LastOperation field value if set, zero value otherwise.
func (o *DatabaseEmbedded) GetLastOperation() Operation {
	if o == nil || IsNil(o.LastOperation) {
		var ret Operation
		return ret
	}
	return *o.LastOperation
}

// GetLastOperationOk returns a tuple with the LastOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseEmbedded) GetLastOperationOk() (*Operation, bool) {
	if o == nil || IsNil(o.LastOperation) {
		return nil, false
	}
	return o.LastOperation, true
}

// HasLastOperation returns a boolean if a field has been set.
func (o *DatabaseEmbedded) HasLastOperation() bool {
	if o != nil && !IsNil(o.LastOperation) {
		return true
	}

	return false
}

// SetLastOperation gets a reference to the given Operation and assigns it to the LastOperation field.
func (o *DatabaseEmbedded) SetLastOperation(v Operation) {
	o.LastOperation = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *DatabaseEmbedded) GetDisk() Disk {
	if o == nil || IsNil(o.Disk) {
		var ret Disk
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseEmbedded) GetDiskOk() (*Disk, bool) {
	if o == nil || IsNil(o.Disk) {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *DatabaseEmbedded) HasDisk() bool {
	if o != nil && !IsNil(o.Disk) {
		return true
	}

	return false
}

// SetDisk gets a reference to the given Disk and assigns it to the Disk field.
func (o *DatabaseEmbedded) SetDisk(v Disk) {
	o.Disk = &v
}

// GetDatabaseCredentials returns the DatabaseCredentials field value if set, zero value otherwise.
func (o *DatabaseEmbedded) GetDatabaseCredentials() []DatabaseCredential {
	if o == nil || IsNil(o.DatabaseCredentials) {
		var ret []DatabaseCredential
		return ret
	}
	return o.DatabaseCredentials
}

// GetDatabaseCredentialsOk returns a tuple with the DatabaseCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseEmbedded) GetDatabaseCredentialsOk() ([]DatabaseCredential, bool) {
	if o == nil || IsNil(o.DatabaseCredentials) {
		return nil, false
	}
	return o.DatabaseCredentials, true
}

// HasDatabaseCredentials returns a boolean if a field has been set.
func (o *DatabaseEmbedded) HasDatabaseCredentials() bool {
	if o != nil && !IsNil(o.DatabaseCredentials) {
		return true
	}

	return false
}

// SetDatabaseCredentials gets a reference to the given []DatabaseCredential and assigns it to the DatabaseCredentials field.
func (o *DatabaseEmbedded) SetDatabaseCredentials(v []DatabaseCredential) {
	o.DatabaseCredentials = v
}

func (o DatabaseEmbedded) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseEmbedded) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LastOperation) {
		toSerialize["last_operation"] = o.LastOperation
	}
	if !IsNil(o.Disk) {
		toSerialize["disk"] = o.Disk
	}
	if !IsNil(o.DatabaseCredentials) {
		toSerialize["database_credentials"] = o.DatabaseCredentials
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DatabaseEmbedded) UnmarshalJSON(data []byte) (err error) {
	varDatabaseEmbedded := _DatabaseEmbedded{}

	err = json.Unmarshal(data, &varDatabaseEmbedded)

	if err != nil {
		return err
	}

	*o = DatabaseEmbedded(varDatabaseEmbedded)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "last_operation")
		delete(additionalProperties, "disk")
		delete(additionalProperties, "database_credentials")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDatabaseEmbedded struct {
	value *DatabaseEmbedded
	isSet bool
}

func (v NullableDatabaseEmbedded) Get() *DatabaseEmbedded {
	return v.value
}

func (v *NullableDatabaseEmbedded) Set(val *DatabaseEmbedded) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseEmbedded) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseEmbedded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseEmbedded(val *DatabaseEmbedded) *NullableDatabaseEmbedded {
	return &NullableDatabaseEmbedded{value: val, isSet: true}
}

func (v NullableDatabaseEmbedded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseEmbedded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


