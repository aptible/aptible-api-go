/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Certificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Certificate{}

// Certificate struct for Certificate
type Certificate struct {
	Id int32 `json:"id"`
	MetaType string `json:"_type"`
	CertificateBody string `json:"certificate_body"`
	PrivateKey string `json:"private_key"`
	CommonName string `json:"common_name"`
	NotBefore string `json:"not_before"`
	NotAfter string `json:"not_after"`
	IssuerCountry string `json:"issuer_country"`
	IssuerOrganization string `json:"issuer_organization"`
	IssuerWebsite NullableString `json:"issuer_website"`
	IssuerCommonName string `json:"issuer_common_name"`
	SubjectCountry NullableString `json:"subject_country"`
	SubjectState NullableString `json:"subject_state"`
	SubjectLocale NullableString `json:"subject_locale"`
	SubjectOrganization NullableString `json:"subject_organization"`
	Acme bool `json:"acme"`
	LeafCertificate string `json:"leaf_certificate"`
	CertificateChain string `json:"certificate_chain"`
	Sha256Fingerprint string `json:"sha256_fingerprint"`
	Trusted bool `json:"trusted"`
	SelfSigned bool `json:"self_signed"`
	CertificateArn NullableString `json:"certificate_arn"`
	SubjectAlternativeNames []string `json:"subject_alternative_names"`
	PrivateKeyAlgorithm string `json:"private_key_algorithm"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	Links *CertificateLinks `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Certificate Certificate

// NewCertificate instantiates a new Certificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificate(id int32, metaType string, certificateBody string, privateKey string, commonName string, notBefore string, notAfter string, issuerCountry string, issuerOrganization string, issuerWebsite NullableString, issuerCommonName string, subjectCountry NullableString, subjectState NullableString, subjectLocale NullableString, subjectOrganization NullableString, acme bool, leafCertificate string, certificateChain string, sha256Fingerprint string, trusted bool, selfSigned bool, certificateArn NullableString, subjectAlternativeNames []string, privateKeyAlgorithm string, createdAt string, updatedAt string) *Certificate {
	this := Certificate{}
	this.Id = id
	this.MetaType = metaType
	this.CertificateBody = certificateBody
	this.PrivateKey = privateKey
	this.CommonName = commonName
	this.NotBefore = notBefore
	this.NotAfter = notAfter
	this.IssuerCountry = issuerCountry
	this.IssuerOrganization = issuerOrganization
	this.IssuerWebsite = issuerWebsite
	this.IssuerCommonName = issuerCommonName
	this.SubjectCountry = subjectCountry
	this.SubjectState = subjectState
	this.SubjectLocale = subjectLocale
	this.SubjectOrganization = subjectOrganization
	this.Acme = acme
	this.LeafCertificate = leafCertificate
	this.CertificateChain = certificateChain
	this.Sha256Fingerprint = sha256Fingerprint
	this.Trusted = trusted
	this.SelfSigned = selfSigned
	this.CertificateArn = certificateArn
	this.SubjectAlternativeNames = subjectAlternativeNames
	this.PrivateKeyAlgorithm = privateKeyAlgorithm
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewCertificateWithDefaults instantiates a new Certificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateWithDefaults() *Certificate {
	this := Certificate{}
	return &this
}

// GetId returns the Id field value
func (o *Certificate) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Certificate) SetId(v int32) {
	o.Id = v
}

// GetMetaType returns the MetaType field value
func (o *Certificate) GetMetaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetaType
}

// GetMetaTypeOk returns a tuple with the MetaType field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetMetaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaType, true
}

// SetMetaType sets field value
func (o *Certificate) SetMetaType(v string) {
	o.MetaType = v
}

// GetCertificateBody returns the CertificateBody field value
func (o *Certificate) GetCertificateBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateBody
}

// GetCertificateBodyOk returns a tuple with the CertificateBody field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetCertificateBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateBody, true
}

// SetCertificateBody sets field value
func (o *Certificate) SetCertificateBody(v string) {
	o.CertificateBody = v
}

// GetPrivateKey returns the PrivateKey field value
func (o *Certificate) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *Certificate) SetPrivateKey(v string) {
	o.PrivateKey = v
}

// GetCommonName returns the CommonName field value
func (o *Certificate) GetCommonName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetCommonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommonName, true
}

// SetCommonName sets field value
func (o *Certificate) SetCommonName(v string) {
	o.CommonName = v
}

// GetNotBefore returns the NotBefore field value
func (o *Certificate) GetNotBefore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetNotBeforeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotBefore, true
}

// SetNotBefore sets field value
func (o *Certificate) SetNotBefore(v string) {
	o.NotBefore = v
}

// GetNotAfter returns the NotAfter field value
func (o *Certificate) GetNotAfter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetNotAfterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotAfter, true
}

// SetNotAfter sets field value
func (o *Certificate) SetNotAfter(v string) {
	o.NotAfter = v
}

// GetIssuerCountry returns the IssuerCountry field value
func (o *Certificate) GetIssuerCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuerCountry
}

// GetIssuerCountryOk returns a tuple with the IssuerCountry field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetIssuerCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuerCountry, true
}

// SetIssuerCountry sets field value
func (o *Certificate) SetIssuerCountry(v string) {
	o.IssuerCountry = v
}

// GetIssuerOrganization returns the IssuerOrganization field value
func (o *Certificate) GetIssuerOrganization() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuerOrganization
}

// GetIssuerOrganizationOk returns a tuple with the IssuerOrganization field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetIssuerOrganizationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuerOrganization, true
}

// SetIssuerOrganization sets field value
func (o *Certificate) SetIssuerOrganization(v string) {
	o.IssuerOrganization = v
}

// GetIssuerWebsite returns the IssuerWebsite field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Certificate) GetIssuerWebsite() string {
	if o == nil || o.IssuerWebsite.Get() == nil {
		var ret string
		return ret
	}

	return *o.IssuerWebsite.Get()
}

// GetIssuerWebsiteOk returns a tuple with the IssuerWebsite field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Certificate) GetIssuerWebsiteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssuerWebsite.Get(), o.IssuerWebsite.IsSet()
}

// SetIssuerWebsite sets field value
func (o *Certificate) SetIssuerWebsite(v string) {
	o.IssuerWebsite.Set(&v)
}

// GetIssuerCommonName returns the IssuerCommonName field value
func (o *Certificate) GetIssuerCommonName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuerCommonName
}

// GetIssuerCommonNameOk returns a tuple with the IssuerCommonName field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetIssuerCommonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuerCommonName, true
}

// SetIssuerCommonName sets field value
func (o *Certificate) SetIssuerCommonName(v string) {
	o.IssuerCommonName = v
}

// GetSubjectCountry returns the SubjectCountry field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Certificate) GetSubjectCountry() string {
	if o == nil || o.SubjectCountry.Get() == nil {
		var ret string
		return ret
	}

	return *o.SubjectCountry.Get()
}

// GetSubjectCountryOk returns a tuple with the SubjectCountry field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Certificate) GetSubjectCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubjectCountry.Get(), o.SubjectCountry.IsSet()
}

// SetSubjectCountry sets field value
func (o *Certificate) SetSubjectCountry(v string) {
	o.SubjectCountry.Set(&v)
}

// GetSubjectState returns the SubjectState field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Certificate) GetSubjectState() string {
	if o == nil || o.SubjectState.Get() == nil {
		var ret string
		return ret
	}

	return *o.SubjectState.Get()
}

// GetSubjectStateOk returns a tuple with the SubjectState field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Certificate) GetSubjectStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubjectState.Get(), o.SubjectState.IsSet()
}

// SetSubjectState sets field value
func (o *Certificate) SetSubjectState(v string) {
	o.SubjectState.Set(&v)
}

// GetSubjectLocale returns the SubjectLocale field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Certificate) GetSubjectLocale() string {
	if o == nil || o.SubjectLocale.Get() == nil {
		var ret string
		return ret
	}

	return *o.SubjectLocale.Get()
}

// GetSubjectLocaleOk returns a tuple with the SubjectLocale field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Certificate) GetSubjectLocaleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubjectLocale.Get(), o.SubjectLocale.IsSet()
}

// SetSubjectLocale sets field value
func (o *Certificate) SetSubjectLocale(v string) {
	o.SubjectLocale.Set(&v)
}

// GetSubjectOrganization returns the SubjectOrganization field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Certificate) GetSubjectOrganization() string {
	if o == nil || o.SubjectOrganization.Get() == nil {
		var ret string
		return ret
	}

	return *o.SubjectOrganization.Get()
}

// GetSubjectOrganizationOk returns a tuple with the SubjectOrganization field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Certificate) GetSubjectOrganizationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubjectOrganization.Get(), o.SubjectOrganization.IsSet()
}

// SetSubjectOrganization sets field value
func (o *Certificate) SetSubjectOrganization(v string) {
	o.SubjectOrganization.Set(&v)
}

// GetAcme returns the Acme field value
func (o *Certificate) GetAcme() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Acme
}

// GetAcmeOk returns a tuple with the Acme field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetAcmeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Acme, true
}

// SetAcme sets field value
func (o *Certificate) SetAcme(v bool) {
	o.Acme = v
}

// GetLeafCertificate returns the LeafCertificate field value
func (o *Certificate) GetLeafCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LeafCertificate
}

// GetLeafCertificateOk returns a tuple with the LeafCertificate field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetLeafCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeafCertificate, true
}

// SetLeafCertificate sets field value
func (o *Certificate) SetLeafCertificate(v string) {
	o.LeafCertificate = v
}

// GetCertificateChain returns the CertificateChain field value
func (o *Certificate) GetCertificateChain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateChain
}

// GetCertificateChainOk returns a tuple with the CertificateChain field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetCertificateChainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateChain, true
}

// SetCertificateChain sets field value
func (o *Certificate) SetCertificateChain(v string) {
	o.CertificateChain = v
}

// GetSha256Fingerprint returns the Sha256Fingerprint field value
func (o *Certificate) GetSha256Fingerprint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha256Fingerprint
}

// GetSha256FingerprintOk returns a tuple with the Sha256Fingerprint field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetSha256FingerprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha256Fingerprint, true
}

// SetSha256Fingerprint sets field value
func (o *Certificate) SetSha256Fingerprint(v string) {
	o.Sha256Fingerprint = v
}

// GetTrusted returns the Trusted field value
func (o *Certificate) GetTrusted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Trusted
}

// GetTrustedOk returns a tuple with the Trusted field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetTrustedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Trusted, true
}

// SetTrusted sets field value
func (o *Certificate) SetTrusted(v bool) {
	o.Trusted = v
}

// GetSelfSigned returns the SelfSigned field value
func (o *Certificate) GetSelfSigned() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SelfSigned
}

// GetSelfSignedOk returns a tuple with the SelfSigned field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetSelfSignedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SelfSigned, true
}

// SetSelfSigned sets field value
func (o *Certificate) SetSelfSigned(v bool) {
	o.SelfSigned = v
}

// GetCertificateArn returns the CertificateArn field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Certificate) GetCertificateArn() string {
	if o == nil || o.CertificateArn.Get() == nil {
		var ret string
		return ret
	}

	return *o.CertificateArn.Get()
}

// GetCertificateArnOk returns a tuple with the CertificateArn field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Certificate) GetCertificateArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CertificateArn.Get(), o.CertificateArn.IsSet()
}

// SetCertificateArn sets field value
func (o *Certificate) SetCertificateArn(v string) {
	o.CertificateArn.Set(&v)
}

// GetSubjectAlternativeNames returns the SubjectAlternativeNames field value
func (o *Certificate) GetSubjectAlternativeNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SubjectAlternativeNames
}

// GetSubjectAlternativeNamesOk returns a tuple with the SubjectAlternativeNames field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetSubjectAlternativeNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubjectAlternativeNames, true
}

// SetSubjectAlternativeNames sets field value
func (o *Certificate) SetSubjectAlternativeNames(v []string) {
	o.SubjectAlternativeNames = v
}

// GetPrivateKeyAlgorithm returns the PrivateKeyAlgorithm field value
func (o *Certificate) GetPrivateKeyAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKeyAlgorithm
}

// GetPrivateKeyAlgorithmOk returns a tuple with the PrivateKeyAlgorithm field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetPrivateKeyAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKeyAlgorithm, true
}

// SetPrivateKeyAlgorithm sets field value
func (o *Certificate) SetPrivateKeyAlgorithm(v string) {
	o.PrivateKeyAlgorithm = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Certificate) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Certificate) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Certificate) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Certificate) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Certificate) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Certificate) GetLinks() CertificateLinks {
	if o == nil || IsNil(o.Links) {
		var ret CertificateLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetLinksOk() (*CertificateLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Certificate) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given CertificateLinks and assigns it to the Links field.
func (o *Certificate) SetLinks(v CertificateLinks) {
	o.Links = &v
}

func (o Certificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Certificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["_type"] = o.MetaType
	toSerialize["certificate_body"] = o.CertificateBody
	toSerialize["private_key"] = o.PrivateKey
	toSerialize["common_name"] = o.CommonName
	toSerialize["not_before"] = o.NotBefore
	toSerialize["not_after"] = o.NotAfter
	toSerialize["issuer_country"] = o.IssuerCountry
	toSerialize["issuer_organization"] = o.IssuerOrganization
	toSerialize["issuer_website"] = o.IssuerWebsite.Get()
	toSerialize["issuer_common_name"] = o.IssuerCommonName
	toSerialize["subject_country"] = o.SubjectCountry.Get()
	toSerialize["subject_state"] = o.SubjectState.Get()
	toSerialize["subject_locale"] = o.SubjectLocale.Get()
	toSerialize["subject_organization"] = o.SubjectOrganization.Get()
	toSerialize["acme"] = o.Acme
	toSerialize["leaf_certificate"] = o.LeafCertificate
	toSerialize["certificate_chain"] = o.CertificateChain
	toSerialize["sha256_fingerprint"] = o.Sha256Fingerprint
	toSerialize["trusted"] = o.Trusted
	toSerialize["self_signed"] = o.SelfSigned
	toSerialize["certificate_arn"] = o.CertificateArn.Get()
	toSerialize["subject_alternative_names"] = o.SubjectAlternativeNames
	toSerialize["private_key_algorithm"] = o.PrivateKeyAlgorithm
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Certificate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"_type",
		"certificate_body",
		"private_key",
		"common_name",
		"not_before",
		"not_after",
		"issuer_country",
		"issuer_organization",
		"issuer_website",
		"issuer_common_name",
		"subject_country",
		"subject_state",
		"subject_locale",
		"subject_organization",
		"acme",
		"leaf_certificate",
		"certificate_chain",
		"sha256_fingerprint",
		"trusted",
		"self_signed",
		"certificate_arn",
		"subject_alternative_names",
		"private_key_algorithm",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificate := _Certificate{}

	err = json.Unmarshal(data, &varCertificate)

	if err != nil {
		return err
	}

	*o = Certificate(varCertificate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "_type")
		delete(additionalProperties, "certificate_body")
		delete(additionalProperties, "private_key")
		delete(additionalProperties, "common_name")
		delete(additionalProperties, "not_before")
		delete(additionalProperties, "not_after")
		delete(additionalProperties, "issuer_country")
		delete(additionalProperties, "issuer_organization")
		delete(additionalProperties, "issuer_website")
		delete(additionalProperties, "issuer_common_name")
		delete(additionalProperties, "subject_country")
		delete(additionalProperties, "subject_state")
		delete(additionalProperties, "subject_locale")
		delete(additionalProperties, "subject_organization")
		delete(additionalProperties, "acme")
		delete(additionalProperties, "leaf_certificate")
		delete(additionalProperties, "certificate_chain")
		delete(additionalProperties, "sha256_fingerprint")
		delete(additionalProperties, "trusted")
		delete(additionalProperties, "self_signed")
		delete(additionalProperties, "certificate_arn")
		delete(additionalProperties, "subject_alternative_names")
		delete(additionalProperties, "private_key_algorithm")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificate struct {
	value *Certificate
	isSet bool
}

func (v NullableCertificate) Get() *Certificate {
	return v.value
}

func (v *NullableCertificate) Set(val *Certificate) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificate(val *Certificate) *NullableCertificate {
	return &NullableCertificate{value: val, isSet: true}
}

func (v NullableCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


