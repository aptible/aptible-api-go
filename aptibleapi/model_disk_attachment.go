/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the DiskAttachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskAttachment{}

// DiskAttachment struct for DiskAttachment
type DiskAttachment struct {
	Id int32 `json:"id"`
	MetaType string `json:"_type"`
	MountPoint string `json:"mount_point"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	DeletedAt NullableString `json:"deleted_at"`
	Embedded DiskAttachmentEmbedded `json:"_embedded"`
	Links *DiskAttachmentLinks `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DiskAttachment DiskAttachment

// NewDiskAttachment instantiates a new DiskAttachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskAttachment(id int32, metaType string, mountPoint string, createdAt string, updatedAt string, deletedAt NullableString, embedded DiskAttachmentEmbedded) *DiskAttachment {
	this := DiskAttachment{}
	this.Id = id
	this.MetaType = metaType
	this.MountPoint = mountPoint
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.DeletedAt = deletedAt
	this.Embedded = embedded
	return &this
}

// NewDiskAttachmentWithDefaults instantiates a new DiskAttachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskAttachmentWithDefaults() *DiskAttachment {
	this := DiskAttachment{}
	return &this
}

// GetId returns the Id field value
func (o *DiskAttachment) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DiskAttachment) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DiskAttachment) SetId(v int32) {
	o.Id = v
}

// GetMetaType returns the MetaType field value
func (o *DiskAttachment) GetMetaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetaType
}

// GetMetaTypeOk returns a tuple with the MetaType field value
// and a boolean to check if the value has been set.
func (o *DiskAttachment) GetMetaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaType, true
}

// SetMetaType sets field value
func (o *DiskAttachment) SetMetaType(v string) {
	o.MetaType = v
}

// GetMountPoint returns the MountPoint field value
func (o *DiskAttachment) GetMountPoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MountPoint
}

// GetMountPointOk returns a tuple with the MountPoint field value
// and a boolean to check if the value has been set.
func (o *DiskAttachment) GetMountPointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MountPoint, true
}

// SetMountPoint sets field value
func (o *DiskAttachment) SetMountPoint(v string) {
	o.MountPoint = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DiskAttachment) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DiskAttachment) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DiskAttachment) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *DiskAttachment) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *DiskAttachment) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *DiskAttachment) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetDeletedAt returns the DeletedAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DiskAttachment) GetDeletedAt() string {
	if o == nil || o.DeletedAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.DeletedAt.Get()
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskAttachment) GetDeletedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeletedAt.Get(), o.DeletedAt.IsSet()
}

// SetDeletedAt sets field value
func (o *DiskAttachment) SetDeletedAt(v string) {
	o.DeletedAt.Set(&v)
}

// GetEmbedded returns the Embedded field value
func (o *DiskAttachment) GetEmbedded() DiskAttachmentEmbedded {
	if o == nil {
		var ret DiskAttachmentEmbedded
		return ret
	}

	return o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value
// and a boolean to check if the value has been set.
func (o *DiskAttachment) GetEmbeddedOk() (*DiskAttachmentEmbedded, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Embedded, true
}

// SetEmbedded sets field value
func (o *DiskAttachment) SetEmbedded(v DiskAttachmentEmbedded) {
	o.Embedded = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DiskAttachment) GetLinks() DiskAttachmentLinks {
	if o == nil || IsNil(o.Links) {
		var ret DiskAttachmentLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskAttachment) GetLinksOk() (*DiskAttachmentLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DiskAttachment) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given DiskAttachmentLinks and assigns it to the Links field.
func (o *DiskAttachment) SetLinks(v DiskAttachmentLinks) {
	o.Links = &v
}

func (o DiskAttachment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskAttachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["_type"] = o.MetaType
	toSerialize["mount_point"] = o.MountPoint
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["deleted_at"] = o.DeletedAt.Get()
	toSerialize["_embedded"] = o.Embedded
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DiskAttachment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"_type",
		"mount_point",
		"created_at",
		"updated_at",
		"deleted_at",
		"_embedded",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDiskAttachment := _DiskAttachment{}

	err = json.Unmarshal(data, &varDiskAttachment)

	if err != nil {
		return err
	}

	*o = DiskAttachment(varDiskAttachment)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "_type")
		delete(additionalProperties, "mount_point")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "deleted_at")
		delete(additionalProperties, "_embedded")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDiskAttachment struct {
	value *DiskAttachment
	isSet bool
}

func (v NullableDiskAttachment) Get() *DiskAttachment {
	return v.value
}

func (v *NullableDiskAttachment) Set(val *DiskAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskAttachment(val *DiskAttachment) *NullableDiskAttachment {
	return &NullableDiskAttachment{value: val, isSet: true}
}

func (v NullableDiskAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


