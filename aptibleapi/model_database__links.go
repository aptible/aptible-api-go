/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
)

// checks if the DatabaseLinks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseLinks{}

// DatabaseLinks struct for DatabaseLinks
type DatabaseLinks struct {
	Account *DatabaseLinksAccount `json:"account,omitempty"`
	DatabaseImage *DatabaseLinksDatabaseImage `json:"database_image,omitempty"`
	Service *DatabaseLinksService `json:"service,omitempty"`
	Disk *DatabaseLinksDisk `json:"disk,omitempty"`
	InitializeFrom *DatabaseLinksInitializeFrom `json:"initialize_from,omitempty"`
	CurrentConfiguration *DatabaseLinksCurrentConfiguration `json:"current_configuration,omitempty"`
	Dependents *DatabaseLinksDependents `json:"dependents,omitempty"`
	Operations *DatabaseLinksOperations `json:"operations,omitempty"`
	Backups *DatabaseLinksBackups `json:"backups,omitempty"`
	Configurations *DatabaseLinksConfigurations `json:"configurations,omitempty"`
	DatabaseCredentials *DatabaseLinksDatabaseCredentials `json:"database_credentials,omitempty"`
	Self *DatabaseLinksSelf `json:"self,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DatabaseLinks DatabaseLinks

// NewDatabaseLinks instantiates a new DatabaseLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseLinks() *DatabaseLinks {
	this := DatabaseLinks{}
	return &this
}

// NewDatabaseLinksWithDefaults instantiates a new DatabaseLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseLinksWithDefaults() *DatabaseLinks {
	this := DatabaseLinks{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *DatabaseLinks) GetAccount() DatabaseLinksAccount {
	if o == nil || IsNil(o.Account) {
		var ret DatabaseLinksAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseLinks) GetAccountOk() (*DatabaseLinksAccount, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *DatabaseLinks) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given DatabaseLinksAccount and assigns it to the Account field.
func (o *DatabaseLinks) SetAccount(v DatabaseLinksAccount) {
	o.Account = &v
}

// GetDatabaseImage returns the DatabaseImage field value if set, zero value otherwise.
func (o *DatabaseLinks) GetDatabaseImage() DatabaseLinksDatabaseImage {
	if o == nil || IsNil(o.DatabaseImage) {
		var ret DatabaseLinksDatabaseImage
		return ret
	}
	return *o.DatabaseImage
}

// GetDatabaseImageOk returns a tuple with the DatabaseImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseLinks) GetDatabaseImageOk() (*DatabaseLinksDatabaseImage, bool) {
	if o == nil || IsNil(o.DatabaseImage) {
		return nil, false
	}
	return o.DatabaseImage, true
}

// HasDatabaseImage returns a boolean if a field has been set.
func (o *DatabaseLinks) HasDatabaseImage() bool {
	if o != nil && !IsNil(o.DatabaseImage) {
		return true
	}

	return false
}

// SetDatabaseImage gets a reference to the given DatabaseLinksDatabaseImage and assigns it to the DatabaseImage field.
func (o *DatabaseLinks) SetDatabaseImage(v DatabaseLinksDatabaseImage) {
	o.DatabaseImage = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *DatabaseLinks) GetService() DatabaseLinksService {
	if o == nil || IsNil(o.Service) {
		var ret DatabaseLinksService
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseLinks) GetServiceOk() (*DatabaseLinksService, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *DatabaseLinks) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given DatabaseLinksService and assigns it to the Service field.
func (o *DatabaseLinks) SetService(v DatabaseLinksService) {
	o.Service = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *DatabaseLinks) GetDisk() DatabaseLinksDisk {
	if o == nil || IsNil(o.Disk) {
		var ret DatabaseLinksDisk
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseLinks) GetDiskOk() (*DatabaseLinksDisk, bool) {
	if o == nil || IsNil(o.Disk) {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *DatabaseLinks) HasDisk() bool {
	if o != nil && !IsNil(o.Disk) {
		return true
	}

	return false
}

// SetDisk gets a reference to the given DatabaseLinksDisk and assigns it to the Disk field.
func (o *DatabaseLinks) SetDisk(v DatabaseLinksDisk) {
	o.Disk = &v
}

// GetInitializeFrom returns the InitializeFrom field value if set, zero value otherwise.
func (o *DatabaseLinks) GetInitializeFrom() DatabaseLinksInitializeFrom {
	if o == nil || IsNil(o.InitializeFrom) {
		var ret DatabaseLinksInitializeFrom
		return ret
	}
	return *o.InitializeFrom
}

// GetInitializeFromOk returns a tuple with the InitializeFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseLinks) GetInitializeFromOk() (*DatabaseLinksInitializeFrom, bool) {
	if o == nil || IsNil(o.InitializeFrom) {
		return nil, false
	}
	return o.InitializeFrom, true
}

// HasInitializeFrom returns a boolean if a field has been set.
func (o *DatabaseLinks) HasInitializeFrom() bool {
	if o != nil && !IsNil(o.InitializeFrom) {
		return true
	}

	return false
}

// SetInitializeFrom gets a reference to the given DatabaseLinksInitializeFrom and assigns it to the InitializeFrom field.
func (o *DatabaseLinks) SetInitializeFrom(v DatabaseLinksInitializeFrom) {
	o.InitializeFrom = &v
}

// GetCurrentConfiguration returns the CurrentConfiguration field value if set, zero value otherwise.
func (o *DatabaseLinks) GetCurrentConfiguration() DatabaseLinksCurrentConfiguration {
	if o == nil || IsNil(o.CurrentConfiguration) {
		var ret DatabaseLinksCurrentConfiguration
		return ret
	}
	return *o.CurrentConfiguration
}

// GetCurrentConfigurationOk returns a tuple with the CurrentConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseLinks) GetCurrentConfigurationOk() (*DatabaseLinksCurrentConfiguration, bool) {
	if o == nil || IsNil(o.CurrentConfiguration) {
		return nil, false
	}
	return o.CurrentConfiguration, true
}

// HasCurrentConfiguration returns a boolean if a field has been set.
func (o *DatabaseLinks) HasCurrentConfiguration() bool {
	if o != nil && !IsNil(o.CurrentConfiguration) {
		return true
	}

	return false
}

// SetCurrentConfiguration gets a reference to the given DatabaseLinksCurrentConfiguration and assigns it to the CurrentConfiguration field.
func (o *DatabaseLinks) SetCurrentConfiguration(v DatabaseLinksCurrentConfiguration) {
	o.CurrentConfiguration = &v
}

// GetDependents returns the Dependents field value if set, zero value otherwise.
func (o *DatabaseLinks) GetDependents() DatabaseLinksDependents {
	if o == nil || IsNil(o.Dependents) {
		var ret DatabaseLinksDependents
		return ret
	}
	return *o.Dependents
}

// GetDependentsOk returns a tuple with the Dependents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseLinks) GetDependentsOk() (*DatabaseLinksDependents, bool) {
	if o == nil || IsNil(o.Dependents) {
		return nil, false
	}
	return o.Dependents, true
}

// HasDependents returns a boolean if a field has been set.
func (o *DatabaseLinks) HasDependents() bool {
	if o != nil && !IsNil(o.Dependents) {
		return true
	}

	return false
}

// SetDependents gets a reference to the given DatabaseLinksDependents and assigns it to the Dependents field.
func (o *DatabaseLinks) SetDependents(v DatabaseLinksDependents) {
	o.Dependents = &v
}

// GetOperations returns the Operations field value if set, zero value otherwise.
func (o *DatabaseLinks) GetOperations() DatabaseLinksOperations {
	if o == nil || IsNil(o.Operations) {
		var ret DatabaseLinksOperations
		return ret
	}
	return *o.Operations
}

// GetOperationsOk returns a tuple with the Operations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseLinks) GetOperationsOk() (*DatabaseLinksOperations, bool) {
	if o == nil || IsNil(o.Operations) {
		return nil, false
	}
	return o.Operations, true
}

// HasOperations returns a boolean if a field has been set.
func (o *DatabaseLinks) HasOperations() bool {
	if o != nil && !IsNil(o.Operations) {
		return true
	}

	return false
}

// SetOperations gets a reference to the given DatabaseLinksOperations and assigns it to the Operations field.
func (o *DatabaseLinks) SetOperations(v DatabaseLinksOperations) {
	o.Operations = &v
}

// GetBackups returns the Backups field value if set, zero value otherwise.
func (o *DatabaseLinks) GetBackups() DatabaseLinksBackups {
	if o == nil || IsNil(o.Backups) {
		var ret DatabaseLinksBackups
		return ret
	}
	return *o.Backups
}

// GetBackupsOk returns a tuple with the Backups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseLinks) GetBackupsOk() (*DatabaseLinksBackups, bool) {
	if o == nil || IsNil(o.Backups) {
		return nil, false
	}
	return o.Backups, true
}

// HasBackups returns a boolean if a field has been set.
func (o *DatabaseLinks) HasBackups() bool {
	if o != nil && !IsNil(o.Backups) {
		return true
	}

	return false
}

// SetBackups gets a reference to the given DatabaseLinksBackups and assigns it to the Backups field.
func (o *DatabaseLinks) SetBackups(v DatabaseLinksBackups) {
	o.Backups = &v
}

// GetConfigurations returns the Configurations field value if set, zero value otherwise.
func (o *DatabaseLinks) GetConfigurations() DatabaseLinksConfigurations {
	if o == nil || IsNil(o.Configurations) {
		var ret DatabaseLinksConfigurations
		return ret
	}
	return *o.Configurations
}

// GetConfigurationsOk returns a tuple with the Configurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseLinks) GetConfigurationsOk() (*DatabaseLinksConfigurations, bool) {
	if o == nil || IsNil(o.Configurations) {
		return nil, false
	}
	return o.Configurations, true
}

// HasConfigurations returns a boolean if a field has been set.
func (o *DatabaseLinks) HasConfigurations() bool {
	if o != nil && !IsNil(o.Configurations) {
		return true
	}

	return false
}

// SetConfigurations gets a reference to the given DatabaseLinksConfigurations and assigns it to the Configurations field.
func (o *DatabaseLinks) SetConfigurations(v DatabaseLinksConfigurations) {
	o.Configurations = &v
}

// GetDatabaseCredentials returns the DatabaseCredentials field value if set, zero value otherwise.
func (o *DatabaseLinks) GetDatabaseCredentials() DatabaseLinksDatabaseCredentials {
	if o == nil || IsNil(o.DatabaseCredentials) {
		var ret DatabaseLinksDatabaseCredentials
		return ret
	}
	return *o.DatabaseCredentials
}

// GetDatabaseCredentialsOk returns a tuple with the DatabaseCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseLinks) GetDatabaseCredentialsOk() (*DatabaseLinksDatabaseCredentials, bool) {
	if o == nil || IsNil(o.DatabaseCredentials) {
		return nil, false
	}
	return o.DatabaseCredentials, true
}

// HasDatabaseCredentials returns a boolean if a field has been set.
func (o *DatabaseLinks) HasDatabaseCredentials() bool {
	if o != nil && !IsNil(o.DatabaseCredentials) {
		return true
	}

	return false
}

// SetDatabaseCredentials gets a reference to the given DatabaseLinksDatabaseCredentials and assigns it to the DatabaseCredentials field.
func (o *DatabaseLinks) SetDatabaseCredentials(v DatabaseLinksDatabaseCredentials) {
	o.DatabaseCredentials = &v
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *DatabaseLinks) GetSelf() DatabaseLinksSelf {
	if o == nil || IsNil(o.Self) {
		var ret DatabaseLinksSelf
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseLinks) GetSelfOk() (*DatabaseLinksSelf, bool) {
	if o == nil || IsNil(o.Self) {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *DatabaseLinks) HasSelf() bool {
	if o != nil && !IsNil(o.Self) {
		return true
	}

	return false
}

// SetSelf gets a reference to the given DatabaseLinksSelf and assigns it to the Self field.
func (o *DatabaseLinks) SetSelf(v DatabaseLinksSelf) {
	o.Self = &v
}

func (o DatabaseLinks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.DatabaseImage) {
		toSerialize["database_image"] = o.DatabaseImage
	}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	if !IsNil(o.Disk) {
		toSerialize["disk"] = o.Disk
	}
	if !IsNil(o.InitializeFrom) {
		toSerialize["initialize_from"] = o.InitializeFrom
	}
	if !IsNil(o.CurrentConfiguration) {
		toSerialize["current_configuration"] = o.CurrentConfiguration
	}
	if !IsNil(o.Dependents) {
		toSerialize["dependents"] = o.Dependents
	}
	if !IsNil(o.Operations) {
		toSerialize["operations"] = o.Operations
	}
	if !IsNil(o.Backups) {
		toSerialize["backups"] = o.Backups
	}
	if !IsNil(o.Configurations) {
		toSerialize["configurations"] = o.Configurations
	}
	if !IsNil(o.DatabaseCredentials) {
		toSerialize["database_credentials"] = o.DatabaseCredentials
	}
	if !IsNil(o.Self) {
		toSerialize["self"] = o.Self
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DatabaseLinks) UnmarshalJSON(data []byte) (err error) {
	varDatabaseLinks := _DatabaseLinks{}

	err = json.Unmarshal(data, &varDatabaseLinks)

	if err != nil {
		return err
	}

	*o = DatabaseLinks(varDatabaseLinks)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "account")
		delete(additionalProperties, "database_image")
		delete(additionalProperties, "service")
		delete(additionalProperties, "disk")
		delete(additionalProperties, "initialize_from")
		delete(additionalProperties, "current_configuration")
		delete(additionalProperties, "dependents")
		delete(additionalProperties, "operations")
		delete(additionalProperties, "backups")
		delete(additionalProperties, "configurations")
		delete(additionalProperties, "database_credentials")
		delete(additionalProperties, "self")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDatabaseLinks struct {
	value *DatabaseLinks
	isSet bool
}

func (v NullableDatabaseLinks) Get() *DatabaseLinks {
	return v.value
}

func (v *NullableDatabaseLinks) Set(val *DatabaseLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseLinks(val *DatabaseLinks) *NullableDatabaseLinks {
	return &NullableDatabaseLinks{value: val, isSet: true}
}

func (v NullableDatabaseLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


