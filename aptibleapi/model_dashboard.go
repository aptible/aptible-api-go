/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Dashboard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dashboard{}

// Dashboard struct for Dashboard
type Dashboard struct {
	Id string `json:"id"`
	MetaType string `json:"_type"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	Name string `json:"name"`
	OrganizationId string `json:"organization_id"`
	RangeBegin string `json:"range_begin"`
	RangeEnd string `json:"range_end"`
	ObservationTimestamp string `json:"observation_timestamp"`
	ResourceId int32 `json:"resource_id"`
	ResourceType string `json:"resource_type"`
	Data map[string]interface{} `json:"data"`
	Links *DashboardLinks `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Dashboard Dashboard

// NewDashboard instantiates a new Dashboard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboard(id string, metaType string, createdAt string, updatedAt string, name string, organizationId string, rangeBegin string, rangeEnd string, observationTimestamp string, resourceId int32, resourceType string, data map[string]interface{}) *Dashboard {
	this := Dashboard{}
	this.Id = id
	this.MetaType = metaType
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Name = name
	this.OrganizationId = organizationId
	this.RangeBegin = rangeBegin
	this.RangeEnd = rangeEnd
	this.ObservationTimestamp = observationTimestamp
	this.ResourceId = resourceId
	this.ResourceType = resourceType
	this.Data = data
	return &this
}

// NewDashboardWithDefaults instantiates a new Dashboard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardWithDefaults() *Dashboard {
	this := Dashboard{}
	return &this
}

// GetId returns the Id field value
func (o *Dashboard) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Dashboard) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Dashboard) SetId(v string) {
	o.Id = v
}

// GetMetaType returns the MetaType field value
func (o *Dashboard) GetMetaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetaType
}

// GetMetaTypeOk returns a tuple with the MetaType field value
// and a boolean to check if the value has been set.
func (o *Dashboard) GetMetaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaType, true
}

// SetMetaType sets field value
func (o *Dashboard) SetMetaType(v string) {
	o.MetaType = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Dashboard) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Dashboard) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Dashboard) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Dashboard) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Dashboard) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Dashboard) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetName returns the Name field value
func (o *Dashboard) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Dashboard) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Dashboard) SetName(v string) {
	o.Name = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *Dashboard) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *Dashboard) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *Dashboard) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetRangeBegin returns the RangeBegin field value
func (o *Dashboard) GetRangeBegin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RangeBegin
}

// GetRangeBeginOk returns a tuple with the RangeBegin field value
// and a boolean to check if the value has been set.
func (o *Dashboard) GetRangeBeginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RangeBegin, true
}

// SetRangeBegin sets field value
func (o *Dashboard) SetRangeBegin(v string) {
	o.RangeBegin = v
}

// GetRangeEnd returns the RangeEnd field value
func (o *Dashboard) GetRangeEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RangeEnd
}

// GetRangeEndOk returns a tuple with the RangeEnd field value
// and a boolean to check if the value has been set.
func (o *Dashboard) GetRangeEndOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RangeEnd, true
}

// SetRangeEnd sets field value
func (o *Dashboard) SetRangeEnd(v string) {
	o.RangeEnd = v
}

// GetObservationTimestamp returns the ObservationTimestamp field value
func (o *Dashboard) GetObservationTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObservationTimestamp
}

// GetObservationTimestampOk returns a tuple with the ObservationTimestamp field value
// and a boolean to check if the value has been set.
func (o *Dashboard) GetObservationTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObservationTimestamp, true
}

// SetObservationTimestamp sets field value
func (o *Dashboard) SetObservationTimestamp(v string) {
	o.ObservationTimestamp = v
}

// GetResourceId returns the ResourceId field value
func (o *Dashboard) GetResourceId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *Dashboard) GetResourceIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *Dashboard) SetResourceId(v int32) {
	o.ResourceId = v
}

// GetResourceType returns the ResourceType field value
func (o *Dashboard) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *Dashboard) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *Dashboard) SetResourceType(v string) {
	o.ResourceType = v
}

// GetData returns the Data field value
func (o *Dashboard) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Dashboard) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *Dashboard) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Dashboard) GetLinks() DashboardLinks {
	if o == nil || IsNil(o.Links) {
		var ret DashboardLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetLinksOk() (*DashboardLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Dashboard) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given DashboardLinks and assigns it to the Links field.
func (o *Dashboard) SetLinks(v DashboardLinks) {
	o.Links = &v
}

func (o Dashboard) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dashboard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["_type"] = o.MetaType
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["name"] = o.Name
	toSerialize["organization_id"] = o.OrganizationId
	toSerialize["range_begin"] = o.RangeBegin
	toSerialize["range_end"] = o.RangeEnd
	toSerialize["observation_timestamp"] = o.ObservationTimestamp
	toSerialize["resource_id"] = o.ResourceId
	toSerialize["resource_type"] = o.ResourceType
	toSerialize["data"] = o.Data
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Dashboard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"_type",
		"created_at",
		"updated_at",
		"name",
		"organization_id",
		"range_begin",
		"range_end",
		"observation_timestamp",
		"resource_id",
		"resource_type",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDashboard := _Dashboard{}

	err = json.Unmarshal(data, &varDashboard)

	if err != nil {
		return err
	}

	*o = Dashboard(varDashboard)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "_type")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "name")
		delete(additionalProperties, "organization_id")
		delete(additionalProperties, "range_begin")
		delete(additionalProperties, "range_end")
		delete(additionalProperties, "observation_timestamp")
		delete(additionalProperties, "resource_id")
		delete(additionalProperties, "resource_type")
		delete(additionalProperties, "data")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDashboard struct {
	value *Dashboard
	isSet bool
}

func (v NullableDashboard) Get() *Dashboard {
	return v.value
}

func (v *NullableDashboard) Set(val *Dashboard) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboard) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboard(val *Dashboard) *NullableDashboard {
	return &NullableDashboard{value: val, isSet: true}
}

func (v NullableDashboard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


