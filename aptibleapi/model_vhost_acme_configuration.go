/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
)

// checks if the VhostAcmeConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VhostAcmeConfiguration{}

// VhostAcmeConfiguration struct for VhostAcmeConfiguration
type VhostAcmeConfiguration struct {
	Names []string `json:"names,omitempty"`
	Challenges []VhostAcmeConfigurationChallengesInner `json:"challenges,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VhostAcmeConfiguration VhostAcmeConfiguration

// NewVhostAcmeConfiguration instantiates a new VhostAcmeConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVhostAcmeConfiguration() *VhostAcmeConfiguration {
	this := VhostAcmeConfiguration{}
	return &this
}

// NewVhostAcmeConfigurationWithDefaults instantiates a new VhostAcmeConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVhostAcmeConfigurationWithDefaults() *VhostAcmeConfiguration {
	this := VhostAcmeConfiguration{}
	return &this
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *VhostAcmeConfiguration) GetNames() []string {
	if o == nil || IsNil(o.Names) {
		var ret []string
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VhostAcmeConfiguration) GetNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Names) {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *VhostAcmeConfiguration) HasNames() bool {
	if o != nil && !IsNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *VhostAcmeConfiguration) SetNames(v []string) {
	o.Names = v
}

// GetChallenges returns the Challenges field value if set, zero value otherwise.
func (o *VhostAcmeConfiguration) GetChallenges() []VhostAcmeConfigurationChallengesInner {
	if o == nil || IsNil(o.Challenges) {
		var ret []VhostAcmeConfigurationChallengesInner
		return ret
	}
	return o.Challenges
}

// GetChallengesOk returns a tuple with the Challenges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VhostAcmeConfiguration) GetChallengesOk() ([]VhostAcmeConfigurationChallengesInner, bool) {
	if o == nil || IsNil(o.Challenges) {
		return nil, false
	}
	return o.Challenges, true
}

// HasChallenges returns a boolean if a field has been set.
func (o *VhostAcmeConfiguration) HasChallenges() bool {
	if o != nil && !IsNil(o.Challenges) {
		return true
	}

	return false
}

// SetChallenges gets a reference to the given []VhostAcmeConfigurationChallengesInner and assigns it to the Challenges field.
func (o *VhostAcmeConfiguration) SetChallenges(v []VhostAcmeConfigurationChallengesInner) {
	o.Challenges = v
}

func (o VhostAcmeConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VhostAcmeConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	if !IsNil(o.Challenges) {
		toSerialize["challenges"] = o.Challenges
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VhostAcmeConfiguration) UnmarshalJSON(data []byte) (err error) {
	varVhostAcmeConfiguration := _VhostAcmeConfiguration{}

	err = json.Unmarshal(data, &varVhostAcmeConfiguration)

	if err != nil {
		return err
	}

	*o = VhostAcmeConfiguration(varVhostAcmeConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "names")
		delete(additionalProperties, "challenges")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVhostAcmeConfiguration struct {
	value *VhostAcmeConfiguration
	isSet bool
}

func (v NullableVhostAcmeConfiguration) Get() *VhostAcmeConfiguration {
	return v.value
}

func (v *NullableVhostAcmeConfiguration) Set(val *VhostAcmeConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableVhostAcmeConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableVhostAcmeConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVhostAcmeConfiguration(val *VhostAcmeConfiguration) *NullableVhostAcmeConfiguration {
	return &NullableVhostAcmeConfiguration{value: val, isSet: true}
}

func (v NullableVhostAcmeConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVhostAcmeConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


