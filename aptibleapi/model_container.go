/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Container type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Container{}

// Container struct for Container
type Container struct {
	Id int32 `json:"id"`
	Host string `json:"host"`
	Port int32 `json:"port"`
	Status string `json:"status"`
	DockerName NullableString `json:"docker_name"`
	MetaType string `json:"_type"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	Layer string `json:"layer"`
	AwsInstanceId NullableString `json:"aws_instance_id"`
	InstanceClass NullableString `json:"instance_class"`
	MemoryLimit int32 `json:"memory_limit"`
	PortMapping [][]int32 `json:"port_mapping"`
	Allocation []string `json:"allocation"`
	Mounts [][]string `json:"mounts"`
	Links *ContainerLinks `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Container Container

// NewContainer instantiates a new Container object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainer(id int32, host string, port int32, status string, dockerName NullableString, metaType string, createdAt string, updatedAt string, layer string, awsInstanceId NullableString, instanceClass NullableString, memoryLimit int32, portMapping [][]int32, allocation []string, mounts [][]string) *Container {
	this := Container{}
	this.Id = id
	this.Host = host
	this.Port = port
	this.Status = status
	this.DockerName = dockerName
	this.MetaType = metaType
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Layer = layer
	this.AwsInstanceId = awsInstanceId
	this.InstanceClass = instanceClass
	this.MemoryLimit = memoryLimit
	this.PortMapping = portMapping
	this.Allocation = allocation
	this.Mounts = mounts
	return &this
}

// NewContainerWithDefaults instantiates a new Container object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerWithDefaults() *Container {
	this := Container{}
	return &this
}

// GetId returns the Id field value
func (o *Container) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Container) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Container) SetId(v int32) {
	o.Id = v
}

// GetHost returns the Host field value
func (o *Container) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *Container) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *Container) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *Container) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *Container) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *Container) SetPort(v int32) {
	o.Port = v
}

// GetStatus returns the Status field value
func (o *Container) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Container) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Container) SetStatus(v string) {
	o.Status = v
}

// GetDockerName returns the DockerName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Container) GetDockerName() string {
	if o == nil || o.DockerName.Get() == nil {
		var ret string
		return ret
	}

	return *o.DockerName.Get()
}

// GetDockerNameOk returns a tuple with the DockerName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Container) GetDockerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DockerName.Get(), o.DockerName.IsSet()
}

// SetDockerName sets field value
func (o *Container) SetDockerName(v string) {
	o.DockerName.Set(&v)
}

// GetMetaType returns the MetaType field value
func (o *Container) GetMetaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetaType
}

// GetMetaTypeOk returns a tuple with the MetaType field value
// and a boolean to check if the value has been set.
func (o *Container) GetMetaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaType, true
}

// SetMetaType sets field value
func (o *Container) SetMetaType(v string) {
	o.MetaType = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Container) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Container) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Container) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Container) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Container) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Container) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetLayer returns the Layer field value
func (o *Container) GetLayer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Layer
}

// GetLayerOk returns a tuple with the Layer field value
// and a boolean to check if the value has been set.
func (o *Container) GetLayerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Layer, true
}

// SetLayer sets field value
func (o *Container) SetLayer(v string) {
	o.Layer = v
}

// GetAwsInstanceId returns the AwsInstanceId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Container) GetAwsInstanceId() string {
	if o == nil || o.AwsInstanceId.Get() == nil {
		var ret string
		return ret
	}

	return *o.AwsInstanceId.Get()
}

// GetAwsInstanceIdOk returns a tuple with the AwsInstanceId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Container) GetAwsInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AwsInstanceId.Get(), o.AwsInstanceId.IsSet()
}

// SetAwsInstanceId sets field value
func (o *Container) SetAwsInstanceId(v string) {
	o.AwsInstanceId.Set(&v)
}

// GetInstanceClass returns the InstanceClass field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Container) GetInstanceClass() string {
	if o == nil || o.InstanceClass.Get() == nil {
		var ret string
		return ret
	}

	return *o.InstanceClass.Get()
}

// GetInstanceClassOk returns a tuple with the InstanceClass field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Container) GetInstanceClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstanceClass.Get(), o.InstanceClass.IsSet()
}

// SetInstanceClass sets field value
func (o *Container) SetInstanceClass(v string) {
	o.InstanceClass.Set(&v)
}

// GetMemoryLimit returns the MemoryLimit field value
func (o *Container) GetMemoryLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MemoryLimit
}

// GetMemoryLimitOk returns a tuple with the MemoryLimit field value
// and a boolean to check if the value has been set.
func (o *Container) GetMemoryLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemoryLimit, true
}

// SetMemoryLimit sets field value
func (o *Container) SetMemoryLimit(v int32) {
	o.MemoryLimit = v
}

// GetPortMapping returns the PortMapping field value
func (o *Container) GetPortMapping() [][]int32 {
	if o == nil {
		var ret [][]int32
		return ret
	}

	return o.PortMapping
}

// GetPortMappingOk returns a tuple with the PortMapping field value
// and a boolean to check if the value has been set.
func (o *Container) GetPortMappingOk() ([][]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PortMapping, true
}

// SetPortMapping sets field value
func (o *Container) SetPortMapping(v [][]int32) {
	o.PortMapping = v
}

// GetAllocation returns the Allocation field value
func (o *Container) GetAllocation() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Allocation
}

// GetAllocationOk returns a tuple with the Allocation field value
// and a boolean to check if the value has been set.
func (o *Container) GetAllocationOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Allocation, true
}

// SetAllocation sets field value
func (o *Container) SetAllocation(v []string) {
	o.Allocation = v
}

// GetMounts returns the Mounts field value
func (o *Container) GetMounts() [][]string {
	if o == nil {
		var ret [][]string
		return ret
	}

	return o.Mounts
}

// GetMountsOk returns a tuple with the Mounts field value
// and a boolean to check if the value has been set.
func (o *Container) GetMountsOk() ([][]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mounts, true
}

// SetMounts sets field value
func (o *Container) SetMounts(v [][]string) {
	o.Mounts = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Container) GetLinks() ContainerLinks {
	if o == nil || IsNil(o.Links) {
		var ret ContainerLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetLinksOk() (*ContainerLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Container) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given ContainerLinks and assigns it to the Links field.
func (o *Container) SetLinks(v ContainerLinks) {
	o.Links = &v
}

func (o Container) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Container) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["host"] = o.Host
	toSerialize["port"] = o.Port
	toSerialize["status"] = o.Status
	toSerialize["docker_name"] = o.DockerName.Get()
	toSerialize["_type"] = o.MetaType
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["layer"] = o.Layer
	toSerialize["aws_instance_id"] = o.AwsInstanceId.Get()
	toSerialize["instance_class"] = o.InstanceClass.Get()
	toSerialize["memory_limit"] = o.MemoryLimit
	toSerialize["port_mapping"] = o.PortMapping
	toSerialize["allocation"] = o.Allocation
	toSerialize["mounts"] = o.Mounts
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Container) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"host",
		"port",
		"status",
		"docker_name",
		"_type",
		"created_at",
		"updated_at",
		"layer",
		"aws_instance_id",
		"instance_class",
		"memory_limit",
		"port_mapping",
		"allocation",
		"mounts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContainer := _Container{}

	err = json.Unmarshal(data, &varContainer)

	if err != nil {
		return err
	}

	*o = Container(varContainer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "host")
		delete(additionalProperties, "port")
		delete(additionalProperties, "status")
		delete(additionalProperties, "docker_name")
		delete(additionalProperties, "_type")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "layer")
		delete(additionalProperties, "aws_instance_id")
		delete(additionalProperties, "instance_class")
		delete(additionalProperties, "memory_limit")
		delete(additionalProperties, "port_mapping")
		delete(additionalProperties, "allocation")
		delete(additionalProperties, "mounts")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContainer struct {
	value *Container
	isSet bool
}

func (v NullableContainer) Get() *Container {
	return v.value
}

func (v *NullableContainer) Set(val *Container) {
	v.value = val
	v.isSet = true
}

func (v NullableContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainer(val *Container) *NullableContainer {
	return &NullableContainer{value: val, isSet: true}
}

func (v NullableContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


