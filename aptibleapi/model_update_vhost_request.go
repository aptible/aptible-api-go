/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
)

// checks if the UpdateVhostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateVhostRequest{}

// UpdateVhostRequest struct for UpdateVhostRequest
type UpdateVhostRequest struct {
	UserDomain *string `json:"user_domain,omitempty"`
	Certificate *int32 `json:"certificate,omitempty"`
	Platform *string `json:"platform,omitempty"`
	ContainerPort *int32 `json:"container_port,omitempty"`
	ContainerPorts []int32 `json:"container_ports,omitempty"`
	IpWhitelist []string `json:"ip_whitelist,omitempty"`
	SharedFingerprint *string `json:"shared_fingerprint,omitempty"`
	Shared *bool `json:"shared,omitempty"`
	LoadBalancingAlgorithmType *string `json:"load_balancing_algorithm_type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateVhostRequest UpdateVhostRequest

// NewUpdateVhostRequest instantiates a new UpdateVhostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateVhostRequest() *UpdateVhostRequest {
	this := UpdateVhostRequest{}
	return &this
}

// NewUpdateVhostRequestWithDefaults instantiates a new UpdateVhostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateVhostRequestWithDefaults() *UpdateVhostRequest {
	this := UpdateVhostRequest{}
	return &this
}

// GetUserDomain returns the UserDomain field value if set, zero value otherwise.
func (o *UpdateVhostRequest) GetUserDomain() string {
	if o == nil || IsNil(o.UserDomain) {
		var ret string
		return ret
	}
	return *o.UserDomain
}

// GetUserDomainOk returns a tuple with the UserDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVhostRequest) GetUserDomainOk() (*string, bool) {
	if o == nil || IsNil(o.UserDomain) {
		return nil, false
	}
	return o.UserDomain, true
}

// HasUserDomain returns a boolean if a field has been set.
func (o *UpdateVhostRequest) HasUserDomain() bool {
	if o != nil && !IsNil(o.UserDomain) {
		return true
	}

	return false
}

// SetUserDomain gets a reference to the given string and assigns it to the UserDomain field.
func (o *UpdateVhostRequest) SetUserDomain(v string) {
	o.UserDomain = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *UpdateVhostRequest) GetCertificate() int32 {
	if o == nil || IsNil(o.Certificate) {
		var ret int32
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVhostRequest) GetCertificateOk() (*int32, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *UpdateVhostRequest) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given int32 and assigns it to the Certificate field.
func (o *UpdateVhostRequest) SetCertificate(v int32) {
	o.Certificate = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *UpdateVhostRequest) GetPlatform() string {
	if o == nil || IsNil(o.Platform) {
		var ret string
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVhostRequest) GetPlatformOk() (*string, bool) {
	if o == nil || IsNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *UpdateVhostRequest) HasPlatform() bool {
	if o != nil && !IsNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given string and assigns it to the Platform field.
func (o *UpdateVhostRequest) SetPlatform(v string) {
	o.Platform = &v
}

// GetContainerPort returns the ContainerPort field value if set, zero value otherwise.
func (o *UpdateVhostRequest) GetContainerPort() int32 {
	if o == nil || IsNil(o.ContainerPort) {
		var ret int32
		return ret
	}
	return *o.ContainerPort
}

// GetContainerPortOk returns a tuple with the ContainerPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVhostRequest) GetContainerPortOk() (*int32, bool) {
	if o == nil || IsNil(o.ContainerPort) {
		return nil, false
	}
	return o.ContainerPort, true
}

// HasContainerPort returns a boolean if a field has been set.
func (o *UpdateVhostRequest) HasContainerPort() bool {
	if o != nil && !IsNil(o.ContainerPort) {
		return true
	}

	return false
}

// SetContainerPort gets a reference to the given int32 and assigns it to the ContainerPort field.
func (o *UpdateVhostRequest) SetContainerPort(v int32) {
	o.ContainerPort = &v
}

// GetContainerPorts returns the ContainerPorts field value if set, zero value otherwise.
func (o *UpdateVhostRequest) GetContainerPorts() []int32 {
	if o == nil || IsNil(o.ContainerPorts) {
		var ret []int32
		return ret
	}
	return o.ContainerPorts
}

// GetContainerPortsOk returns a tuple with the ContainerPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVhostRequest) GetContainerPortsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ContainerPorts) {
		return nil, false
	}
	return o.ContainerPorts, true
}

// HasContainerPorts returns a boolean if a field has been set.
func (o *UpdateVhostRequest) HasContainerPorts() bool {
	if o != nil && !IsNil(o.ContainerPorts) {
		return true
	}

	return false
}

// SetContainerPorts gets a reference to the given []int32 and assigns it to the ContainerPorts field.
func (o *UpdateVhostRequest) SetContainerPorts(v []int32) {
	o.ContainerPorts = v
}

// GetIpWhitelist returns the IpWhitelist field value if set, zero value otherwise.
func (o *UpdateVhostRequest) GetIpWhitelist() []string {
	if o == nil || IsNil(o.IpWhitelist) {
		var ret []string
		return ret
	}
	return o.IpWhitelist
}

// GetIpWhitelistOk returns a tuple with the IpWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVhostRequest) GetIpWhitelistOk() ([]string, bool) {
	if o == nil || IsNil(o.IpWhitelist) {
		return nil, false
	}
	return o.IpWhitelist, true
}

// HasIpWhitelist returns a boolean if a field has been set.
func (o *UpdateVhostRequest) HasIpWhitelist() bool {
	if o != nil && !IsNil(o.IpWhitelist) {
		return true
	}

	return false
}

// SetIpWhitelist gets a reference to the given []string and assigns it to the IpWhitelist field.
func (o *UpdateVhostRequest) SetIpWhitelist(v []string) {
	o.IpWhitelist = v
}

// GetSharedFingerprint returns the SharedFingerprint field value if set, zero value otherwise.
func (o *UpdateVhostRequest) GetSharedFingerprint() string {
	if o == nil || IsNil(o.SharedFingerprint) {
		var ret string
		return ret
	}
	return *o.SharedFingerprint
}

// GetSharedFingerprintOk returns a tuple with the SharedFingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVhostRequest) GetSharedFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.SharedFingerprint) {
		return nil, false
	}
	return o.SharedFingerprint, true
}

// HasSharedFingerprint returns a boolean if a field has been set.
func (o *UpdateVhostRequest) HasSharedFingerprint() bool {
	if o != nil && !IsNil(o.SharedFingerprint) {
		return true
	}

	return false
}

// SetSharedFingerprint gets a reference to the given string and assigns it to the SharedFingerprint field.
func (o *UpdateVhostRequest) SetSharedFingerprint(v string) {
	o.SharedFingerprint = &v
}

// GetShared returns the Shared field value if set, zero value otherwise.
func (o *UpdateVhostRequest) GetShared() bool {
	if o == nil || IsNil(o.Shared) {
		var ret bool
		return ret
	}
	return *o.Shared
}

// GetSharedOk returns a tuple with the Shared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVhostRequest) GetSharedOk() (*bool, bool) {
	if o == nil || IsNil(o.Shared) {
		return nil, false
	}
	return o.Shared, true
}

// HasShared returns a boolean if a field has been set.
func (o *UpdateVhostRequest) HasShared() bool {
	if o != nil && !IsNil(o.Shared) {
		return true
	}

	return false
}

// SetShared gets a reference to the given bool and assigns it to the Shared field.
func (o *UpdateVhostRequest) SetShared(v bool) {
	o.Shared = &v
}

// GetLoadBalancingAlgorithmType returns the LoadBalancingAlgorithmType field value if set, zero value otherwise.
func (o *UpdateVhostRequest) GetLoadBalancingAlgorithmType() string {
	if o == nil || IsNil(o.LoadBalancingAlgorithmType) {
		var ret string
		return ret
	}
	return *o.LoadBalancingAlgorithmType
}

// GetLoadBalancingAlgorithmTypeOk returns a tuple with the LoadBalancingAlgorithmType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVhostRequest) GetLoadBalancingAlgorithmTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LoadBalancingAlgorithmType) {
		return nil, false
	}
	return o.LoadBalancingAlgorithmType, true
}

// HasLoadBalancingAlgorithmType returns a boolean if a field has been set.
func (o *UpdateVhostRequest) HasLoadBalancingAlgorithmType() bool {
	if o != nil && !IsNil(o.LoadBalancingAlgorithmType) {
		return true
	}

	return false
}

// SetLoadBalancingAlgorithmType gets a reference to the given string and assigns it to the LoadBalancingAlgorithmType field.
func (o *UpdateVhostRequest) SetLoadBalancingAlgorithmType(v string) {
	o.LoadBalancingAlgorithmType = &v
}

func (o UpdateVhostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateVhostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserDomain) {
		toSerialize["user_domain"] = o.UserDomain
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	if !IsNil(o.ContainerPort) {
		toSerialize["container_port"] = o.ContainerPort
	}
	if !IsNil(o.ContainerPorts) {
		toSerialize["container_ports"] = o.ContainerPorts
	}
	if !IsNil(o.IpWhitelist) {
		toSerialize["ip_whitelist"] = o.IpWhitelist
	}
	if !IsNil(o.SharedFingerprint) {
		toSerialize["shared_fingerprint"] = o.SharedFingerprint
	}
	if !IsNil(o.Shared) {
		toSerialize["shared"] = o.Shared
	}
	if !IsNil(o.LoadBalancingAlgorithmType) {
		toSerialize["load_balancing_algorithm_type"] = o.LoadBalancingAlgorithmType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateVhostRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdateVhostRequest := _UpdateVhostRequest{}

	err = json.Unmarshal(data, &varUpdateVhostRequest)

	if err != nil {
		return err
	}

	*o = UpdateVhostRequest(varUpdateVhostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "user_domain")
		delete(additionalProperties, "certificate")
		delete(additionalProperties, "platform")
		delete(additionalProperties, "container_port")
		delete(additionalProperties, "container_ports")
		delete(additionalProperties, "ip_whitelist")
		delete(additionalProperties, "shared_fingerprint")
		delete(additionalProperties, "shared")
		delete(additionalProperties, "load_balancing_algorithm_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateVhostRequest struct {
	value *UpdateVhostRequest
	isSet bool
}

func (v NullableUpdateVhostRequest) Get() *UpdateVhostRequest {
	return v.value
}

func (v *NullableUpdateVhostRequest) Set(val *UpdateVhostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVhostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVhostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVhostRequest(val *UpdateVhostRequest) *NullableUpdateVhostRequest {
	return &NullableUpdateVhostRequest{value: val, isSet: true}
}

func (v NullableUpdateVhostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVhostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


