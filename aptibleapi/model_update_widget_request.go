/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
)

// checks if the UpdateWidgetRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateWidgetRequest{}

// UpdateWidgetRequest struct for UpdateWidgetRequest
type UpdateWidgetRequest struct {
	Title *string `json:"title,omitempty"`
	Summary *string `json:"summary,omitempty"`
	Rating *int32 `json:"rating,omitempty"`
	WidgetType *string `json:"widget_type,omitempty"`
	Data *map[string]string `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateWidgetRequest UpdateWidgetRequest

// NewUpdateWidgetRequest instantiates a new UpdateWidgetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWidgetRequest() *UpdateWidgetRequest {
	this := UpdateWidgetRequest{}
	return &this
}

// NewUpdateWidgetRequestWithDefaults instantiates a new UpdateWidgetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWidgetRequestWithDefaults() *UpdateWidgetRequest {
	this := UpdateWidgetRequest{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *UpdateWidgetRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWidgetRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *UpdateWidgetRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *UpdateWidgetRequest) SetTitle(v string) {
	o.Title = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *UpdateWidgetRequest) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWidgetRequest) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *UpdateWidgetRequest) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *UpdateWidgetRequest) SetSummary(v string) {
	o.Summary = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *UpdateWidgetRequest) GetRating() int32 {
	if o == nil || IsNil(o.Rating) {
		var ret int32
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWidgetRequest) GetRatingOk() (*int32, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *UpdateWidgetRequest) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given int32 and assigns it to the Rating field.
func (o *UpdateWidgetRequest) SetRating(v int32) {
	o.Rating = &v
}

// GetWidgetType returns the WidgetType field value if set, zero value otherwise.
func (o *UpdateWidgetRequest) GetWidgetType() string {
	if o == nil || IsNil(o.WidgetType) {
		var ret string
		return ret
	}
	return *o.WidgetType
}

// GetWidgetTypeOk returns a tuple with the WidgetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWidgetRequest) GetWidgetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.WidgetType) {
		return nil, false
	}
	return o.WidgetType, true
}

// HasWidgetType returns a boolean if a field has been set.
func (o *UpdateWidgetRequest) HasWidgetType() bool {
	if o != nil && !IsNil(o.WidgetType) {
		return true
	}

	return false
}

// SetWidgetType gets a reference to the given string and assigns it to the WidgetType field.
func (o *UpdateWidgetRequest) SetWidgetType(v string) {
	o.WidgetType = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *UpdateWidgetRequest) GetData() map[string]string {
	if o == nil || IsNil(o.Data) {
		var ret map[string]string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWidgetRequest) GetDataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *UpdateWidgetRequest) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]string and assigns it to the Data field.
func (o *UpdateWidgetRequest) SetData(v map[string]string) {
	o.Data = &v
}

func (o UpdateWidgetRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateWidgetRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.WidgetType) {
		toSerialize["widget_type"] = o.WidgetType
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateWidgetRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdateWidgetRequest := _UpdateWidgetRequest{}

	err = json.Unmarshal(data, &varUpdateWidgetRequest)

	if err != nil {
		return err
	}

	*o = UpdateWidgetRequest(varUpdateWidgetRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "title")
		delete(additionalProperties, "summary")
		delete(additionalProperties, "rating")
		delete(additionalProperties, "widget_type")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateWidgetRequest struct {
	value *UpdateWidgetRequest
	isSet bool
}

func (v NullableUpdateWidgetRequest) Get() *UpdateWidgetRequest {
	return v.value
}

func (v *NullableUpdateWidgetRequest) Set(val *UpdateWidgetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWidgetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWidgetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWidgetRequest(val *UpdateWidgetRequest) *NullableUpdateWidgetRequest {
	return &NullableUpdateWidgetRequest{value: val, isSet: true}
}

func (v NullableUpdateWidgetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWidgetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


