/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
)

// checks if the UpdateOperationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateOperationRequest{}

// UpdateOperationRequest struct for UpdateOperationRequest
type UpdateOperationRequest struct {
	Cancelled *bool `json:"cancelled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateOperationRequest UpdateOperationRequest

// NewUpdateOperationRequest instantiates a new UpdateOperationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateOperationRequest() *UpdateOperationRequest {
	this := UpdateOperationRequest{}
	return &this
}

// NewUpdateOperationRequestWithDefaults instantiates a new UpdateOperationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateOperationRequestWithDefaults() *UpdateOperationRequest {
	this := UpdateOperationRequest{}
	return &this
}

// GetCancelled returns the Cancelled field value if set, zero value otherwise.
func (o *UpdateOperationRequest) GetCancelled() bool {
	if o == nil || IsNil(o.Cancelled) {
		var ret bool
		return ret
	}
	return *o.Cancelled
}

// GetCancelledOk returns a tuple with the Cancelled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOperationRequest) GetCancelledOk() (*bool, bool) {
	if o == nil || IsNil(o.Cancelled) {
		return nil, false
	}
	return o.Cancelled, true
}

// HasCancelled returns a boolean if a field has been set.
func (o *UpdateOperationRequest) HasCancelled() bool {
	if o != nil && !IsNil(o.Cancelled) {
		return true
	}

	return false
}

// SetCancelled gets a reference to the given bool and assigns it to the Cancelled field.
func (o *UpdateOperationRequest) SetCancelled(v bool) {
	o.Cancelled = &v
}

func (o UpdateOperationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateOperationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cancelled) {
		toSerialize["cancelled"] = o.Cancelled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateOperationRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdateOperationRequest := _UpdateOperationRequest{}

	err = json.Unmarshal(data, &varUpdateOperationRequest)

	if err != nil {
		return err
	}

	*o = UpdateOperationRequest(varUpdateOperationRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cancelled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateOperationRequest struct {
	value *UpdateOperationRequest
	isSet bool
}

func (v NullableUpdateOperationRequest) Get() *UpdateOperationRequest {
	return v.value
}

func (v *NullableUpdateOperationRequest) Set(val *UpdateOperationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateOperationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateOperationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateOperationRequest(val *UpdateOperationRequest) *NullableUpdateOperationRequest {
	return &NullableUpdateOperationRequest{value: val, isSet: true}
}

func (v NullableUpdateOperationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateOperationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


