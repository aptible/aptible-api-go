/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the PersistentDisk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PersistentDisk{}

// PersistentDisk struct for PersistentDisk
type PersistentDisk struct {
	MetaType string `json:"_type"`
	Id int32 `json:"id"`
	Handle string `json:"handle"`
	Status string `json:"status"`
	DiskType string `json:"disk_type"`
	Size int32 `json:"size"`
	ProvisionedIops int32 `json:"provisioned_iops"`
	DiskStatus NullableString `json:"disk_status"`
	AwsResourceId NullableString `json:"aws_resource_id"`
	KmsArn NullableString `json:"kms_arn"`
	ModificationProgress NullableInt32 `json:"modification_progress"`
	AvailabilityZone NullableString `json:"availability_zone"`
	Formatted bool `json:"formatted"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	ModifiedAt NullableString `json:"modified_at"`
	DeletedAt NullableString `json:"deleted_at"`
	Links *PersistentDiskLinks `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PersistentDisk PersistentDisk

// NewPersistentDisk instantiates a new PersistentDisk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersistentDisk(metaType string, id int32, handle string, status string, diskType string, size int32, provisionedIops int32, diskStatus NullableString, awsResourceId NullableString, kmsArn NullableString, modificationProgress NullableInt32, availabilityZone NullableString, formatted bool, createdAt string, updatedAt string, modifiedAt NullableString, deletedAt NullableString) *PersistentDisk {
	this := PersistentDisk{}
	this.MetaType = metaType
	this.Id = id
	this.Handle = handle
	this.Status = status
	this.DiskType = diskType
	this.Size = size
	this.ProvisionedIops = provisionedIops
	this.DiskStatus = diskStatus
	this.AwsResourceId = awsResourceId
	this.KmsArn = kmsArn
	this.ModificationProgress = modificationProgress
	this.AvailabilityZone = availabilityZone
	this.Formatted = formatted
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.ModifiedAt = modifiedAt
	this.DeletedAt = deletedAt
	return &this
}

// NewPersistentDiskWithDefaults instantiates a new PersistentDisk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersistentDiskWithDefaults() *PersistentDisk {
	this := PersistentDisk{}
	return &this
}

// GetMetaType returns the MetaType field value
func (o *PersistentDisk) GetMetaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetaType
}

// GetMetaTypeOk returns a tuple with the MetaType field value
// and a boolean to check if the value has been set.
func (o *PersistentDisk) GetMetaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaType, true
}

// SetMetaType sets field value
func (o *PersistentDisk) SetMetaType(v string) {
	o.MetaType = v
}

// GetId returns the Id field value
func (o *PersistentDisk) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PersistentDisk) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PersistentDisk) SetId(v int32) {
	o.Id = v
}

// GetHandle returns the Handle field value
func (o *PersistentDisk) GetHandle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Handle
}

// GetHandleOk returns a tuple with the Handle field value
// and a boolean to check if the value has been set.
func (o *PersistentDisk) GetHandleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Handle, true
}

// SetHandle sets field value
func (o *PersistentDisk) SetHandle(v string) {
	o.Handle = v
}

// GetStatus returns the Status field value
func (o *PersistentDisk) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PersistentDisk) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PersistentDisk) SetStatus(v string) {
	o.Status = v
}

// GetDiskType returns the DiskType field value
func (o *PersistentDisk) GetDiskType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DiskType
}

// GetDiskTypeOk returns a tuple with the DiskType field value
// and a boolean to check if the value has been set.
func (o *PersistentDisk) GetDiskTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskType, true
}

// SetDiskType sets field value
func (o *PersistentDisk) SetDiskType(v string) {
	o.DiskType = v
}

// GetSize returns the Size field value
func (o *PersistentDisk) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *PersistentDisk) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *PersistentDisk) SetSize(v int32) {
	o.Size = v
}

// GetProvisionedIops returns the ProvisionedIops field value
func (o *PersistentDisk) GetProvisionedIops() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProvisionedIops
}

// GetProvisionedIopsOk returns a tuple with the ProvisionedIops field value
// and a boolean to check if the value has been set.
func (o *PersistentDisk) GetProvisionedIopsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProvisionedIops, true
}

// SetProvisionedIops sets field value
func (o *PersistentDisk) SetProvisionedIops(v int32) {
	o.ProvisionedIops = v
}

// GetDiskStatus returns the DiskStatus field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PersistentDisk) GetDiskStatus() string {
	if o == nil || o.DiskStatus.Get() == nil {
		var ret string
		return ret
	}

	return *o.DiskStatus.Get()
}

// GetDiskStatusOk returns a tuple with the DiskStatus field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersistentDisk) GetDiskStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiskStatus.Get(), o.DiskStatus.IsSet()
}

// SetDiskStatus sets field value
func (o *PersistentDisk) SetDiskStatus(v string) {
	o.DiskStatus.Set(&v)
}

// GetAwsResourceId returns the AwsResourceId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PersistentDisk) GetAwsResourceId() string {
	if o == nil || o.AwsResourceId.Get() == nil {
		var ret string
		return ret
	}

	return *o.AwsResourceId.Get()
}

// GetAwsResourceIdOk returns a tuple with the AwsResourceId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersistentDisk) GetAwsResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AwsResourceId.Get(), o.AwsResourceId.IsSet()
}

// SetAwsResourceId sets field value
func (o *PersistentDisk) SetAwsResourceId(v string) {
	o.AwsResourceId.Set(&v)
}

// GetKmsArn returns the KmsArn field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PersistentDisk) GetKmsArn() string {
	if o == nil || o.KmsArn.Get() == nil {
		var ret string
		return ret
	}

	return *o.KmsArn.Get()
}

// GetKmsArnOk returns a tuple with the KmsArn field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersistentDisk) GetKmsArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KmsArn.Get(), o.KmsArn.IsSet()
}

// SetKmsArn sets field value
func (o *PersistentDisk) SetKmsArn(v string) {
	o.KmsArn.Set(&v)
}

// GetModificationProgress returns the ModificationProgress field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *PersistentDisk) GetModificationProgress() int32 {
	if o == nil || o.ModificationProgress.Get() == nil {
		var ret int32
		return ret
	}

	return *o.ModificationProgress.Get()
}

// GetModificationProgressOk returns a tuple with the ModificationProgress field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersistentDisk) GetModificationProgressOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModificationProgress.Get(), o.ModificationProgress.IsSet()
}

// SetModificationProgress sets field value
func (o *PersistentDisk) SetModificationProgress(v int32) {
	o.ModificationProgress.Set(&v)
}

// GetAvailabilityZone returns the AvailabilityZone field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PersistentDisk) GetAvailabilityZone() string {
	if o == nil || o.AvailabilityZone.Get() == nil {
		var ret string
		return ret
	}

	return *o.AvailabilityZone.Get()
}

// GetAvailabilityZoneOk returns a tuple with the AvailabilityZone field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersistentDisk) GetAvailabilityZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailabilityZone.Get(), o.AvailabilityZone.IsSet()
}

// SetAvailabilityZone sets field value
func (o *PersistentDisk) SetAvailabilityZone(v string) {
	o.AvailabilityZone.Set(&v)
}

// GetFormatted returns the Formatted field value
func (o *PersistentDisk) GetFormatted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Formatted
}

// GetFormattedOk returns a tuple with the Formatted field value
// and a boolean to check if the value has been set.
func (o *PersistentDisk) GetFormattedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Formatted, true
}

// SetFormatted sets field value
func (o *PersistentDisk) SetFormatted(v bool) {
	o.Formatted = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PersistentDisk) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PersistentDisk) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PersistentDisk) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PersistentDisk) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PersistentDisk) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PersistentDisk) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetModifiedAt returns the ModifiedAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PersistentDisk) GetModifiedAt() string {
	if o == nil || o.ModifiedAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.ModifiedAt.Get()
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersistentDisk) GetModifiedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedAt.Get(), o.ModifiedAt.IsSet()
}

// SetModifiedAt sets field value
func (o *PersistentDisk) SetModifiedAt(v string) {
	o.ModifiedAt.Set(&v)
}

// GetDeletedAt returns the DeletedAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PersistentDisk) GetDeletedAt() string {
	if o == nil || o.DeletedAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.DeletedAt.Get()
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersistentDisk) GetDeletedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeletedAt.Get(), o.DeletedAt.IsSet()
}

// SetDeletedAt sets field value
func (o *PersistentDisk) SetDeletedAt(v string) {
	o.DeletedAt.Set(&v)
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *PersistentDisk) GetLinks() PersistentDiskLinks {
	if o == nil || IsNil(o.Links) {
		var ret PersistentDiskLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersistentDisk) GetLinksOk() (*PersistentDiskLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *PersistentDisk) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given PersistentDiskLinks and assigns it to the Links field.
func (o *PersistentDisk) SetLinks(v PersistentDiskLinks) {
	o.Links = &v
}

func (o PersistentDisk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PersistentDisk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_type"] = o.MetaType
	toSerialize["id"] = o.Id
	toSerialize["handle"] = o.Handle
	toSerialize["status"] = o.Status
	toSerialize["disk_type"] = o.DiskType
	toSerialize["size"] = o.Size
	toSerialize["provisioned_iops"] = o.ProvisionedIops
	toSerialize["disk_status"] = o.DiskStatus.Get()
	toSerialize["aws_resource_id"] = o.AwsResourceId.Get()
	toSerialize["kms_arn"] = o.KmsArn.Get()
	toSerialize["modification_progress"] = o.ModificationProgress.Get()
	toSerialize["availability_zone"] = o.AvailabilityZone.Get()
	toSerialize["formatted"] = o.Formatted
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["modified_at"] = o.ModifiedAt.Get()
	toSerialize["deleted_at"] = o.DeletedAt.Get()
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PersistentDisk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_type",
		"id",
		"handle",
		"status",
		"disk_type",
		"size",
		"provisioned_iops",
		"disk_status",
		"aws_resource_id",
		"kms_arn",
		"modification_progress",
		"availability_zone",
		"formatted",
		"created_at",
		"updated_at",
		"modified_at",
		"deleted_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPersistentDisk := _PersistentDisk{}

	err = json.Unmarshal(data, &varPersistentDisk)

	if err != nil {
		return err
	}

	*o = PersistentDisk(varPersistentDisk)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_type")
		delete(additionalProperties, "id")
		delete(additionalProperties, "handle")
		delete(additionalProperties, "status")
		delete(additionalProperties, "disk_type")
		delete(additionalProperties, "size")
		delete(additionalProperties, "provisioned_iops")
		delete(additionalProperties, "disk_status")
		delete(additionalProperties, "aws_resource_id")
		delete(additionalProperties, "kms_arn")
		delete(additionalProperties, "modification_progress")
		delete(additionalProperties, "availability_zone")
		delete(additionalProperties, "formatted")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "modified_at")
		delete(additionalProperties, "deleted_at")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePersistentDisk struct {
	value *PersistentDisk
	isSet bool
}

func (v NullablePersistentDisk) Get() *PersistentDisk {
	return v.value
}

func (v *NullablePersistentDisk) Set(val *PersistentDisk) {
	v.value = val
	v.isSet = true
}

func (v NullablePersistentDisk) IsSet() bool {
	return v.isSet
}

func (v *NullablePersistentDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersistentDisk(val *PersistentDisk) *NullablePersistentDisk {
	return &NullablePersistentDisk{value: val, isSet: true}
}

func (v NullablePersistentDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersistentDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


