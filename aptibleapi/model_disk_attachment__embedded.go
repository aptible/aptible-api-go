/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
)

// checks if the DiskAttachmentEmbedded type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskAttachmentEmbedded{}

// DiskAttachmentEmbedded struct for DiskAttachmentEmbedded
type DiskAttachmentEmbedded struct {
	Service *Service `json:"service,omitempty"`
	PersistentDisk *PersistentDisk `json:"persistent_disk,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DiskAttachmentEmbedded DiskAttachmentEmbedded

// NewDiskAttachmentEmbedded instantiates a new DiskAttachmentEmbedded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskAttachmentEmbedded() *DiskAttachmentEmbedded {
	this := DiskAttachmentEmbedded{}
	return &this
}

// NewDiskAttachmentEmbeddedWithDefaults instantiates a new DiskAttachmentEmbedded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskAttachmentEmbeddedWithDefaults() *DiskAttachmentEmbedded {
	this := DiskAttachmentEmbedded{}
	return &this
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *DiskAttachmentEmbedded) GetService() Service {
	if o == nil || IsNil(o.Service) {
		var ret Service
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskAttachmentEmbedded) GetServiceOk() (*Service, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *DiskAttachmentEmbedded) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given Service and assigns it to the Service field.
func (o *DiskAttachmentEmbedded) SetService(v Service) {
	o.Service = &v
}

// GetPersistentDisk returns the PersistentDisk field value if set, zero value otherwise.
func (o *DiskAttachmentEmbedded) GetPersistentDisk() PersistentDisk {
	if o == nil || IsNil(o.PersistentDisk) {
		var ret PersistentDisk
		return ret
	}
	return *o.PersistentDisk
}

// GetPersistentDiskOk returns a tuple with the PersistentDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskAttachmentEmbedded) GetPersistentDiskOk() (*PersistentDisk, bool) {
	if o == nil || IsNil(o.PersistentDisk) {
		return nil, false
	}
	return o.PersistentDisk, true
}

// HasPersistentDisk returns a boolean if a field has been set.
func (o *DiskAttachmentEmbedded) HasPersistentDisk() bool {
	if o != nil && !IsNil(o.PersistentDisk) {
		return true
	}

	return false
}

// SetPersistentDisk gets a reference to the given PersistentDisk and assigns it to the PersistentDisk field.
func (o *DiskAttachmentEmbedded) SetPersistentDisk(v PersistentDisk) {
	o.PersistentDisk = &v
}

func (o DiskAttachmentEmbedded) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskAttachmentEmbedded) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	if !IsNil(o.PersistentDisk) {
		toSerialize["persistent_disk"] = o.PersistentDisk
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DiskAttachmentEmbedded) UnmarshalJSON(data []byte) (err error) {
	varDiskAttachmentEmbedded := _DiskAttachmentEmbedded{}

	err = json.Unmarshal(data, &varDiskAttachmentEmbedded)

	if err != nil {
		return err
	}

	*o = DiskAttachmentEmbedded(varDiskAttachmentEmbedded)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "service")
		delete(additionalProperties, "persistent_disk")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDiskAttachmentEmbedded struct {
	value *DiskAttachmentEmbedded
	isSet bool
}

func (v NullableDiskAttachmentEmbedded) Get() *DiskAttachmentEmbedded {
	return v.value
}

func (v *NullableDiskAttachmentEmbedded) Set(val *DiskAttachmentEmbedded) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskAttachmentEmbedded) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskAttachmentEmbedded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskAttachmentEmbedded(val *DiskAttachmentEmbedded) *NullableDiskAttachmentEmbedded {
	return &NullableDiskAttachmentEmbedded{value: val, isSet: true}
}

func (v NullableDiskAttachmentEmbedded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskAttachmentEmbedded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


