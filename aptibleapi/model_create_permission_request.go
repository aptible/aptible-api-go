/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CreatePermissionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePermissionRequest{}

// CreatePermissionRequest struct for CreatePermissionRequest
type CreatePermissionRequest struct {
	Role string `json:"role"`
	Scope string `json:"scope"`
	AdditionalProperties map[string]interface{}
}

type _CreatePermissionRequest CreatePermissionRequest

// NewCreatePermissionRequest instantiates a new CreatePermissionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePermissionRequest(role string, scope string) *CreatePermissionRequest {
	this := CreatePermissionRequest{}
	this.Role = role
	this.Scope = scope
	return &this
}

// NewCreatePermissionRequestWithDefaults instantiates a new CreatePermissionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePermissionRequestWithDefaults() *CreatePermissionRequest {
	this := CreatePermissionRequest{}
	return &this
}

// GetRole returns the Role field value
func (o *CreatePermissionRequest) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *CreatePermissionRequest) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *CreatePermissionRequest) SetRole(v string) {
	o.Role = v
}

// GetScope returns the Scope field value
func (o *CreatePermissionRequest) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *CreatePermissionRequest) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *CreatePermissionRequest) SetScope(v string) {
	o.Scope = v
}

func (o CreatePermissionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePermissionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role"] = o.Role
	toSerialize["scope"] = o.Scope

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreatePermissionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
		"scope",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreatePermissionRequest := _CreatePermissionRequest{}

	err = json.Unmarshal(data, &varCreatePermissionRequest)

	if err != nil {
		return err
	}

	*o = CreatePermissionRequest(varCreatePermissionRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "role")
		delete(additionalProperties, "scope")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreatePermissionRequest struct {
	value *CreatePermissionRequest
	isSet bool
}

func (v NullableCreatePermissionRequest) Get() *CreatePermissionRequest {
	return v.value
}

func (v *NullableCreatePermissionRequest) Set(val *CreatePermissionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePermissionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePermissionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePermissionRequest(val *CreatePermissionRequest) *NullableCreatePermissionRequest {
	return &NullableCreatePermissionRequest{value: val, isSet: true}
}

func (v NullableCreatePermissionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePermissionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


