/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Release type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Release{}

// Release struct for Release
type Release struct {
	Id int32 `json:"id"`
	MetaType string `json:"_type"`
	DockerRepo NullableString `json:"docker_repo"`
	DockerRef NullableString `json:"docker_ref"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	Links *ReleaseLinks `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Release Release

// NewRelease instantiates a new Release object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelease(id int32, metaType string, dockerRepo NullableString, dockerRef NullableString, createdAt string, updatedAt string) *Release {
	this := Release{}
	this.Id = id
	this.MetaType = metaType
	this.DockerRepo = dockerRepo
	this.DockerRef = dockerRef
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewReleaseWithDefaults instantiates a new Release object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseWithDefaults() *Release {
	this := Release{}
	return &this
}

// GetId returns the Id field value
func (o *Release) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Release) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Release) SetId(v int32) {
	o.Id = v
}

// GetMetaType returns the MetaType field value
func (o *Release) GetMetaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetaType
}

// GetMetaTypeOk returns a tuple with the MetaType field value
// and a boolean to check if the value has been set.
func (o *Release) GetMetaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaType, true
}

// SetMetaType sets field value
func (o *Release) SetMetaType(v string) {
	o.MetaType = v
}

// GetDockerRepo returns the DockerRepo field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Release) GetDockerRepo() string {
	if o == nil || o.DockerRepo.Get() == nil {
		var ret string
		return ret
	}

	return *o.DockerRepo.Get()
}

// GetDockerRepoOk returns a tuple with the DockerRepo field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Release) GetDockerRepoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DockerRepo.Get(), o.DockerRepo.IsSet()
}

// SetDockerRepo sets field value
func (o *Release) SetDockerRepo(v string) {
	o.DockerRepo.Set(&v)
}

// GetDockerRef returns the DockerRef field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Release) GetDockerRef() string {
	if o == nil || o.DockerRef.Get() == nil {
		var ret string
		return ret
	}

	return *o.DockerRef.Get()
}

// GetDockerRefOk returns a tuple with the DockerRef field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Release) GetDockerRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DockerRef.Get(), o.DockerRef.IsSet()
}

// SetDockerRef sets field value
func (o *Release) SetDockerRef(v string) {
	o.DockerRef.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *Release) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Release) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Release) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Release) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Release) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Release) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Release) GetLinks() ReleaseLinks {
	if o == nil || IsNil(o.Links) {
		var ret ReleaseLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetLinksOk() (*ReleaseLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Release) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given ReleaseLinks and assigns it to the Links field.
func (o *Release) SetLinks(v ReleaseLinks) {
	o.Links = &v
}

func (o Release) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Release) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["_type"] = o.MetaType
	toSerialize["docker_repo"] = o.DockerRepo.Get()
	toSerialize["docker_ref"] = o.DockerRef.Get()
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Release) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"_type",
		"docker_repo",
		"docker_ref",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRelease := _Release{}

	err = json.Unmarshal(data, &varRelease)

	if err != nil {
		return err
	}

	*o = Release(varRelease)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "_type")
		delete(additionalProperties, "docker_repo")
		delete(additionalProperties, "docker_ref")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRelease struct {
	value *Release
	isSet bool
}

func (v NullableRelease) Get() *Release {
	return v.value
}

func (v *NullableRelease) Set(val *Release) {
	v.value = val
	v.isSet = true
}

func (v NullableRelease) IsSet() bool {
	return v.isSet
}

func (v *NullableRelease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelease(val *Release) *NullableRelease {
	return &NullableRelease{value: val, isSet: true}
}

func (v NullableRelease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


